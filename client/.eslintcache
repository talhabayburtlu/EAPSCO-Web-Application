[{"/home/talha/IdeaProjects/EAPSCO/client/src/index.js":"1","/home/talha/IdeaProjects/EAPSCO/client/src/App.js":"2","/home/talha/IdeaProjects/EAPSCO/client/src/reportWebVitals.js":"3","/home/talha/IdeaProjects/EAPSCO/client/src/Login.js":"4","/home/talha/IdeaProjects/EAPSCO/client/src/Action.js":"5","/home/talha/IdeaProjects/EAPSCO/client/src/fire.js":"6","/home/talha/IdeaProjects/EAPSCO/client/src/components/product/product.js":"7","/home/talha/IdeaProjects/EAPSCO/client/src/components/product/productBar.js":"8","/home/talha/IdeaProjects/EAPSCO/client/src/components/product/generator.js":"9","/home/talha/IdeaProjects/EAPSCO/client/src/components/product/motor.js":"10","/home/talha/IdeaProjects/EAPSCO/client/src/components/product/ups.js":"11","/home/talha/IdeaProjects/EAPSCO/client/src/components/customer/customer.js":"12","/home/talha/IdeaProjects/EAPSCO/client/src/components/customer/customerBar.js":"13","/home/talha/IdeaProjects/EAPSCO/client/src/components/customer/individualCustomer.js":"14","/home/talha/IdeaProjects/EAPSCO/client/src/components/customer/enterprise.js":"15","/home/talha/IdeaProjects/EAPSCO/client/src/components/employee/employee.js":"16","/home/talha/IdeaProjects/EAPSCO/client/src/components/office/offices.js":"17","/home/talha/IdeaProjects/EAPSCO/client/src/components/service/service.js":"18","/home/talha/IdeaProjects/EAPSCO/client/src/components/supplier/supplier.js":"19","/home/talha/IdeaProjects/EAPSCO/client/src/components/materials/materials.js":"20","/home/talha/IdeaProjects/EAPSCO/client/src/Procedures.js":"21","/home/talha/IdeaProjects/EAPSCO/client/src/Header.jsx":"22"},{"size":509,"mtime":1610358005903,"results":"23","hashOfConfig":"24"},{"size":1962,"mtime":1610553052992,"results":"25","hashOfConfig":"24"},{"size":402,"mtime":1610358005803,"results":"26","hashOfConfig":"24"},{"size":1291,"mtime":1610358005771,"results":"27","hashOfConfig":"24"},{"size":4195,"mtime":1610553050584,"results":"28","hashOfConfig":"24"},{"size":418,"mtime":1610358005755,"results":"29","hashOfConfig":"24"},{"size":7112,"mtime":1610553053012,"results":"30","hashOfConfig":"24"},{"size":736,"mtime":1610376938404,"results":"31","hashOfConfig":"24"},{"size":7442,"mtime":1610553052920,"results":"32","hashOfConfig":"24"},{"size":7042,"mtime":1610553053028,"results":"33","hashOfConfig":"24"},{"size":7390,"mtime":1610553052928,"results":"34","hashOfConfig":"24"},{"size":2551,"mtime":1610552273183,"results":"35","hashOfConfig":"24"},{"size":701,"mtime":1610389642673,"results":"36","hashOfConfig":"24"},{"size":5737,"mtime":1610553052908,"results":"37","hashOfConfig":"24"},{"size":5289,"mtime":1610553052860,"results":"38","hashOfConfig":"24"},{"size":7764,"mtime":1610553052980,"results":"39","hashOfConfig":"24"},{"size":5051,"mtime":1610553053004,"results":"40","hashOfConfig":"24"},{"size":5554,"mtime":1610553052948,"results":"41","hashOfConfig":"24"},{"size":5959,"mtime":1610553053020,"results":"42","hashOfConfig":"24"},{"size":4588,"mtime":1610553052988,"results":"43","hashOfConfig":"24"},{"size":0,"mtime":1610393409474,"results":"44","hashOfConfig":"24"},{"size":2259,"mtime":1610393409474,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"18yva1h",{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"48"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"48"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"48"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"48"},"/home/talha/IdeaProjects/EAPSCO/client/src/index.js",[],["104","105"],"/home/talha/IdeaProjects/EAPSCO/client/src/App.js",["106","107","108"],"/home/talha/IdeaProjects/EAPSCO/client/src/reportWebVitals.js",[],"/home/talha/IdeaProjects/EAPSCO/client/src/Login.js",[],"/home/talha/IdeaProjects/EAPSCO/client/src/Action.js",["109","110"],"import React from 'react';\nimport {Router, BrowserRouter, Route, Switch,} from \"react-router-dom\";\nimport {Button, ButtonGroup, Grid} from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Header from './Header';\n\n\nimport Product from './components/product/product';\nimport Generator from './components/product/generator';\nimport Motor from \"./components/product/motor\";\nimport UPS from \"./components/product/ups\";\nimport Customer from \"./components/customer/customer\";\nimport IndividualCustomers from \"./components/customer/individualCustomer\";\nimport Enterprise from \"./components/customer/enterprise\";\nimport Employee from \"./components/employee/employee\";\nimport Office from \"./components/office/offices\";\nimport Service from \"./components/service/service\";\nimport Supplier from \"./components/supplier/supplier\";\nimport Material from \"./components/materials/materials\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      \"& > *\": {\n        margin: theme.spacing(1),\n        width: theme.spacing(32),\n        height: theme.spacing(16)\n      }\n     \n    },\n    coloredPaper: {\n      backgroundColor: \"primary\",\n      border: 0,\n      borderRadius: 3,\n      boxShadow: '0 3px 5px 2px rgba(0, 0, 0, .3)',\n      color: 'primary',\n      height: 480,\n      width: 1000,\n      padding: '0 30px',\n      flex: 1\n    },\n\n    gridBox: {\n        minHeight: 500,\n        \n\n    }\n  }));\n\nconst Action = props => {\n    const classes = useStyles();\n\n    return (\n        <div>\n            <section className=\"action\">\n            <Grid>\n                <BrowserRouter>\n                    <Header />\n                </BrowserRouter>\n            </Grid>\n\n                <Grid container justify=\"center\" style={{marginTop: \"10px\"}}>\n                    <Grid item xs={12} style={{margin: \"20px 50px\"}}>\n                        <ButtonGroup fullWidth color=\"primary\" variant=\"contained\">\n                            <Button onClick={() => window.location.href = \"/products/all\"}>Products</Button>\n                            <Button onClick={() => window.location.href = \"/customers/all\"}>Customers</Button>\n                            <Button onClick={() => window.location.href = \"/services\"}>Services</Button>\n                            <Button onClick={() => window.location.href = \"/offices\"}>Offices</Button>\n                            <Button onClick={() => window.location.href = \"/employees\"}>Employees</Button>\n                            <Button onClick={() => window.location.href = \"/suppliers\"}>Suppliers</Button>\n                            <Button onClick={() => window.location.href = \"/materials\"}>Materials</Button>\n                        </ButtonGroup>\n                    </Grid>\n                    {/*<Grid item xs={12} align=\"center\" style={{margin: \"20px 50px\", background: \"#666\" , height:\"500px\"}}>\n                        <Product />\n                    </Grid>*/}\n                    <BrowserRouter>\n                        <Switch>\n                            <Route exact path=\"/products/all\" component={Product}/>\n                            <Route exact path=\"/products/generators\" component={Generator}/>\n                            <Route exact path=\"/products/motors\" component={Motor}/>\n                            <Route exact path=\"/products/upses\" component={UPS}/>\n                            <Route exact path=\"/customers/all\" component={Customer}/>\n                            <Route exact path=\"/customers/individualCustomers\" component={IndividualCustomers}/>\n                            <Route exact path=\"/customers/enterprises\" component={Enterprise}/>\n                            <Route exact path=\"/services\" component={Service}/>\n                            <Route exact path=\"/employees\" component={Employee}/>\n                            <Route exact path=\"/offices\" component={Office}/>\n                            <Route exact path=\"/suppliers\" component={Supplier}/>\n                            <Route exact path=\"/materials\" component={Material}/>\n                        </Switch>\n                    </BrowserRouter>\n\n                </Grid>\n            </section>\n        </div>\n\n    );\n};\n\nexport default Action;","/home/talha/IdeaProjects/EAPSCO/client/src/fire.js",[],"/home/talha/IdeaProjects/EAPSCO/client/src/components/product/product.js",["111","112"],"import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport {\n    Button,\n    Grid,\n    Paper,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    TextField,\n    Typography\n} from \"@material-ui/core\";\n\nimport ProductBar from \"./productBar\"\n\nconst Product = (props) => {\n    let [rows, setRows] = useState(null);\n    const [id, setId] = useState(\"\");\n    const [price, setPrice] = useState(\"\");\n    const [sold, setSold] = useState(\"\");\n\n    useEffect(() => {\n        rows = rowValues()\n    }, [])\n\n    const rowValues = async () => {\n        let products;\n        let data = []\n\n        try {\n            const res = await axios({method: \"get\", url: \"/products\"})\n            products = res.data\n        } catch (e) {\n            console.log(e)\n        }\n\n        await Promise.all(products._embedded.generators.map(async g => {\n            const customerId = await getId(\"/products/\" + g._links.self.href.split(\"/\").pop() + \"/customer\")\n            const officeIds = await getIds(\"/products/\" + g._links.self.href.split(\"/\").pop() + \"/offices\", \"offices\")\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.price, g.type, g.sold ? \"True\" : \"False\", customerId, officeIds))\n        }))\n\n        await Promise.all(products._embedded.motors.map(async g => {\n            const customerId = await getId(\"/products/\" + g._links.self.href.split(\"/\").pop() + \"/customer\")\n            const officeIds = await getIds(\"/products/\" + g._links.self.href.split(\"/\").pop() + \"/offices\", \"offices\")\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.price, g.type, g.sold ? \"True\" : \"False\", customerId, officeIds))\n        }))\n\n        await Promise.all(products._embedded.upses.map(async g => {\n            const customerId = await getId(\"/products/\" + g._links.self.href.split(\"/\").pop() + \"/customer\")\n            const officeIds = await getIds(\"/products/\" + g._links.self.href.split(\"/\").pop() + \"/offices\", \"offices\")\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.price, g.type, g.sold ? \"True\" : \"False\", customerId, officeIds))\n        }))\n\n        await Promise.all(products._embedded.products.map(async g => {\n            const customerId = await getId(\"/products/\" + g._links.self.href.split(\"/\").pop() + \"/customer\")\n            const officeIds = await getIds(\"/products/\" + g._links.self.href.split(\"/\").pop() + \"/offices\", \"offices\")\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.price, g.type, g.sold ? \"True\" : \"False\", customerId, officeIds))\n        }))\n\n        data.sort((a, b) => {\n            return a.id - b.id\n        })\n\n        console.log(data)\n\n        setRows(data)\n    }\n\n    const getId = async (href) => {\n        let id;\n        try {\n            const res = await axios({method: \"GET\", url: href})\n            id = res.data._links.self.href.split(\"/\").pop()\n        } catch (e) {\n            id = \" \"\n        }\n\n        return id;\n    }\n\n    const getIds = async (href, partialUrl) => {\n        let ids = \"\"\n        try {\n            const res = await axios({method: \"GET\", url: href})\n            res.data._embedded[partialUrl].map((d => {\n                ids += d._links.self.href.split(\"/\").pop() + \" \"\n            }))\n        } catch (e) {\n            ids = \" \"\n        }\n\n        return ids;\n    }\n\n    const createData = (id, price, type, sold, customerId, officeIds) => {\n        return {id, price, type, sold, customerId, officeIds}\n    }\n\n    const handleCreate = async (event) => {\n        await axios({method: \"POST\", url: \"/products\", data: {type: \"o\", price: price, sold: sold}})\n            .then((res) => console.log(res))\n            .catch((err) => console.log(err))\n    }\n\n    const handleUpdate = async (event) => {\n        await axios({method: \"PUT\", url: \"/products/\" + id, data: {price: price, sold: sold}})\n            .then((res) => console.log(res))\n            .catch((err) => console.log(err))\n    }\n\n    return (\n        <Grid container justify=\"center\" style={{background: \"#FFF\"}}>\n            <ProductBar/>\n            <Grid item xs={6} align=\"center\">\n                <Typography variant=\"h5\">Create A Product (Type: Other)</Typography>\n                {<form noValidate autoComplete=\"off\">\n                    <TextField label=\"Price\" value={price} onChange={(event) => setPrice(event.target.value)}/> <br/>\n                    <TextField label=\"Sold\" value={sold} onChange={(event) => setSold(event.target.value)}/> <br/>\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}}\n                            onClick={handleCreate}>Create</Button>\n                </form>}\n\n            </Grid>\n            <Grid item xs={6} align=\"center\">\n                <Typography variant=\"h5\">Update A Product (Type: Other)</Typography>\n                {<form noValidate autoComplete=\"off\">\n                    <TextField label=\"ID\" value={id} onChange={(event) => setId(event.target.value)}/> <br/>\n                    <TextField label=\"Price\" value={price} onChange={(event) => setPrice(event.target.value)}/> <br/>\n                    <TextField label=\"Sold\" value={sold} onChange={(event) => setSold(event.target.value)}/> <br/>\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}}\n                            onClick={handleUpdate}>Update</Button>\n                </form>}\n            </Grid>\n            <Grid item xs={12} align=\"center\">\n                <Typography variant=\"h5\">All Products</Typography>\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell align=\"left\">ID</TableCell>\n                            <TableCell align=\"left\">Price</TableCell>\n                            <TableCell align=\"right\">Type</TableCell>\n                            <TableCell align=\"right\">Sold</TableCell>\n                            <TableCell align=\"right\">Customer Id</TableCell>\n                            <TableCell align=\"right\">Office Ids</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows != null ? rows.map(row => {\n                            return (\n                                <TableRow key={row.id}>\n                                    <TableCell>{row.id}</TableCell>\n                                    <TableCell>{row.price}</TableCell>\n                                    <TableCell>{row.type}</TableCell>\n                                    <TableCell>{row.sold}</TableCell>\n                                    <TableCell>{row.customerId}</TableCell>\n                                    <TableCell>{row.officeIds}</TableCell>\n                                </TableRow>\n                            )\n                        }) : null}\n                    </TableBody>\n                </TableContainer>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default Product;","/home/talha/IdeaProjects/EAPSCO/client/src/components/product/productBar.js",[],"/home/talha/IdeaProjects/EAPSCO/client/src/components/product/generator.js",["113","114","115"],"import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport {\n    Button,\n    Grid,\n    Paper,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    TextField,\n    Typography\n} from \"@material-ui/core\";\n\nimport ProductBar from \"./productBar\"\n\nconst Generator = (props) => {\n    let [rows, setRows] = useState(null)\n    const [id, setId] = useState(\"\");\n    const [price, setPrice] = useState(\"\");\n    const [sold, setSold] = useState(\"\");\n    const [dimensions, setDimensions] = useState(\"\");\n    const [fuelCapacity, setFuelCapacity] = useState(\"\");\n    const [power, setPower] = useState(\"\");\n\n    useEffect(async () => {\n        rows = await rowValues()\n    }, [])\n\n    const rowValues = async () => {\n        let products;\n        let data = []\n\n        try {\n            const res = await axios({method: \"get\", url: \"/products\"})\n            products = res.data\n        } catch (e) {\n            console.log(e)\n        }\n\n        await Promise.all(products._embedded.generators.map(async g => {\n            const customerId = await getId(\"/products/\" + g._links.self.href.split(\"/\").pop() + \"/customer\")\n            const officeIds = await getIds(\"/products/\" + g._links.self.href.split(\"/\").pop() + \"/offices\", \"offices\")\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.price, g.type, g.sold ? \"True\" : \"False\", g.dimensions, g.fuelCapacity, g.power,customerId,officeIds))\n        }))\n\n        data.sort((a, b) => {\n            return a.id - b.id\n        })\n\n        setRows(data)\n    }\n\n    const getId = async (href) => {\n        let id ;\n        try {\n            const res = await axios({method : \"GET\" , url : href})\n            id = res.data._links.self.href.split(\"/\").pop()\n        } catch (e) {\n            id = \" \"\n        }\n\n        return id;\n    }\n\n    const getIds = async (href,partialUrl) => {\n        let ids = \"\"\n        try {\n            const res = await axios({method : \"GET\" , url : href})\n            res.data._embedded[partialUrl].map((d => {\n                ids += d._links.self.href.split(\"/\").pop() + \" \"\n            }))\n        } catch (e) {\n            ids = \" \"\n        }\n\n        return ids;\n    }\n\n    const createData = (id, price, type, sold, dimensions, fuelCapacity, power,customerId,officeIds) => {\n        return {id, price, type, sold, dimensions, fuelCapacity, power, customerId, officeIds}\n    }\n\n    const handleCreate = async (event) => {\n        await axios({\n            method: \"POST\",\n            url: \"/generators\",\n            data: {type: \"o\", price, sold, dimensions, fuelCapacity, power}\n        })\n            .then((res) => console.log(res))\n            .catch((err) => console.log(err))\n    }\n\n    const handleUpdate = async (event) => {\n        await axios({method: \"PUT\", url: \"/generators/\" + id, data: {price, sold, dimensions, fuelCapacity, power}})\n            .then((res) => console.log(res))\n            .catch((err) => console.log(err))\n    }\n\n\n    return (\n        <Grid container justify=\"center\" style={{background: \"#FFF\"}}>\n            <ProductBar/>\n            <Grid item xs={6} align=\"center\">\n                <Typography variant=\"h5\">Create A Generator</Typography>\n                {<form noValidate autoComplete=\"off\">\n                    <TextField label=\"Price\" value={price} onChange={(event) => setPrice(event.target.value)}/> <br/>\n                    <TextField label=\"Sold\" value={sold} onChange={(event) => setSold(event.target.value)}/> <br/>\n                    <TextField label=\"Dimensions\" value={dimensions}\n                               onChange={(event) => setDimensions(event.target.value)}/> <br/>\n                    <TextField label=\"Fuel Capacity\" value={fuelCapacity}\n                               onChange={(event) => setFuelCapacity(event.target.value)}/> <br/>\n                    <TextField label=\"Power\" value={power} onChange={(event) => setPower(event.target.value)}/> <br/>\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}} onClick={handleCreate}>Create</Button>\n                </form>}\n\n            </Grid>\n            <Grid item xs={6} align=\"center\">\n                <Typography variant=\"h5\">Update A Generator</Typography>\n                {<form noValidate autoComplete=\"off\">\n                    <TextField label=\"ID\" value={id} onChange={(event) => setId(event.target.value)}/> <br/>\n                    <TextField label=\"Price\" value={price} onChange={(event) => setPrice(event.target.value)}/> <br/>\n                    <TextField label=\"Sold\" value={sold} onChange={(event) => setSold(event.target.value)}/> <br/>\n                    <TextField label=\"Dimensions\" value={dimensions}\n                               onChange={(event) => setDimensions(event.target.value)}/> <br/>\n                    <TextField label=\"Fuel Capacity\" value={fuelCapacity}\n                               onChange={(event) => setFuelCapacity(event.target.value)}/> <br/>\n                    <TextField label=\"Power\" value={power} onChange={(event) => setPower(event.target.value)}/> <br/>\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}} onClick={handleUpdate}>Update</Button>\n                </form>}\n            </Grid>\n            <Grid item xs={12} align=\"center\">\n                <Typography variant=\"h5\">All Generators</Typography>\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell align=\"left\">ID</TableCell>\n                            <TableCell align=\"left\">Price</TableCell>\n                            <TableCell align=\"right\">Type</TableCell>\n                            <TableCell align=\"right\">Sold</TableCell>\n                            <TableCell align=\"right\">Dimensions</TableCell>\n                            <TableCell align=\"right\">Fuel Capacity</TableCell>\n                            <TableCell align=\"right\">Power</TableCell>\n                            <TableCell align=\"right\">Customer ID</TableCell>\n                            <TableCell align=\"right\">Office IDs</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows != null ? rows.map(row => {\n                            return (\n                                <TableRow key={row.id}>\n                                    <TableCell>{row.id}</TableCell>\n                                    <TableCell>{row.price}</TableCell>\n                                    <TableCell>{row.type}</TableCell>\n                                    <TableCell>{row.sold}</TableCell>\n                                    <TableCell>{row.dimensions}</TableCell>\n                                    <TableCell>{row.fuelCapacity}</TableCell>\n                                    <TableCell>{row.power}</TableCell>\n                                    <TableCell>{row.customerId}</TableCell>\n                                    <TableCell>{row.officeIds}</TableCell>\n                                </TableRow>\n                            )\n                        }) : null}\n                    </TableBody>\n                </TableContainer>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default Generator;","/home/talha/IdeaProjects/EAPSCO/client/src/components/product/motor.js",["116","117","118"],"import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport {\n    Button,\n    Grid,\n    Paper,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    TextField,\n    Typography\n} from \"@material-ui/core\";\n\nimport ProductBar from \"./productBar\"\n\nconst Motor = (props) => {\n    let [rows, setRows] = useState(null);\n    const [id, setId] = useState(\"\");\n    const [price, setPrice] = useState(\"\");\n    const [sold, setSold] = useState(\"\");\n    const [mtype, setmType] = useState(\"\");\n    const [power, setPower] = useState(\"\");\n    const [rpm, setRpm] = useState(\"\");\n\n    useEffect(async () => {\n        rows = await rowValues()\n    }, [])\n\n    const rowValues = async () => {\n        let products;\n        let data = []\n\n        try {\n            const res = await axios({method: \"get\", url: \"/products\"})\n            products = res.data\n        } catch (e) {\n            console.log(e)\n        }\n\n        await Promise.all(products._embedded.motors.map(async g => {\n            const customerId = await getId(\"/products/\" + g._links.self.href.split(\"/\").pop() + \"/customer\")\n            const officeIds = await getIds(\"/products/\" + g._links.self.href.split(\"/\").pop() + \"/offices\", \"offices\")\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.price, g.type, g.sold ? \"True\" : \"False\", g.mtype, g.power, g.rpm, customerId,officeIds))\n        }))\n\n\n        data.sort((a, b) => {\n            return a.id - b.id\n        })\n\n        setRows(data)\n    }\n\n    const getId = async (href) => {\n        let id ;\n        try {\n            const res = await axios({method : \"GET\" , url : href})\n            id = res.data._links.self.href.split(\"/\").pop()\n        } catch (e) {\n            id = \" \"\n        }\n\n        return id;\n    }\n\n    const getIds = async (href,partialUrl) => {\n        let ids = \"\"\n        try {\n            const res = await axios({method : \"GET\" , url : href})\n            res.data._embedded[partialUrl].map((d => {\n                ids += d._links.self.href.split(\"/\").pop() + \" \"\n            }))\n        } catch (e) {\n            ids = \" \"\n        }\n\n        return ids;\n    }\n\n    const createData = (id, price, type, sold, mtype, power, rpm, customerId,officeIds) => {\n        return {id, price, type, sold, mtype, power, rpm, customerId,officeIds}\n    }\n\n    const handleCreate = async (event) => {\n        await axios({method: \"POST\", url: \"/motors\", data: {type: \"m\", price, sold, mtype, power, rpm}})\n            .then((res) => console.log(res))\n            .catch((err) => console.log(err))\n    }\n\n    const handleUpdate = async (event) => {\n        await axios({method: \"PUT\", url: \"/motors/\" + id, data: {price: price, sold: sold, mtype, power, rpm}})\n            .then((res) => console.log(res))\n            .catch((err) => console.log(err))\n    }\n\n    return (\n        <Grid container justify=\"center\" style={{background: \"#FFF\"}}>\n            <ProductBar/>\n            <Grid item xs={6} align=\"center\">\n                <Typography variant=\"h5\">Create a Motor</Typography>\n                {<form noValidate autoComplete=\"off\">\n                    <TextField label=\"Price\" value={price} onChange={(event) => setPrice(event.target.value)}/> <br/>\n                    <TextField label=\"Sold\" value={sold} onChange={(event) => setSold(event.target.value)}/> <br/>\n                    <TextField label=\"MType\" value={mtype} onChange={(event) => setmType(event.target.value)}/> <br/>\n                    <TextField label=\"Power\" value={power} onChange={(event) => setPower(event.target.value)}/> <br/>\n                    <TextField label=\"RPM\" value={rpm} onChange={(event) => setRpm(event.target.value)}/> <br/>\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}} onClick={handleCreate}>Create</Button>\n                </form>}\n\n            </Grid>\n            <Grid item xs={6} align=\"center\">\n                <Typography variant=\"h5\">Update a Motor</Typography>\n                {<form noValidate autoComplete=\"off\">\n                    <TextField label=\"ID\" value={id} onChange={(event) => setId(event.target.value)}/> <br/>\n                    <TextField label=\"Price\" value={price} onChange={(event) => setPrice(event.target.value)}/> <br/>\n                    <TextField label=\"Sold\" value={sold} onChange={(event) => setSold(event.target.value)}/> <br/>\n                    <TextField label=\"MType\" value={mtype} onChange={(event) => setmType(event.target.value)}/> <br/>\n                    <TextField label=\"Power\" value={power} onChange={(event) => setPower(event.target.value)}/> <br/>\n                    <TextField label=\"RPM\" value={rpm} onChange={(event) => setRpm(event.target.value)}/> <br/>\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}} onClick={handleUpdate}>Update</Button>\n                </form>}\n            </Grid>\n            <Grid item xs={12} align=\"center\">\n                <Typography variant=\"h5\">All Motors</Typography>\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell align=\"left\">ID</TableCell>\n                            <TableCell align=\"left\">Price</TableCell>\n                            <TableCell align=\"right\">Type</TableCell>\n                            <TableCell align=\"right\">Sold</TableCell>\n                            <TableCell align=\"right\">M type</TableCell>\n                            <TableCell align=\"right\">Power</TableCell>\n                            <TableCell align=\"right\">RPM</TableCell>\n                            <TableCell align=\"right\">Customer ID</TableCell>\n                            <TableCell align=\"right\">Office IDs</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows != null ? rows.map(row => {\n                            return (\n                                <TableRow key={row.id}>\n                                    <TableCell>{row.id}</TableCell>\n                                    <TableCell>{row.price}</TableCell>\n                                    <TableCell>{row.type}</TableCell>\n                                    <TableCell>{row.sold}</TableCell>\n                                    <TableCell>{row.mtype}</TableCell>\n                                    <TableCell>{row.power}</TableCell>\n                                    <TableCell>{row.rpm}</TableCell>\n                                    <TableCell>{row.customerId}</TableCell>\n                                    <TableCell>{row.officeIds}</TableCell>\n                                </TableRow>\n                            )\n                        }) : null}\n                    </TableBody>\n                </TableContainer>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default Motor;","/home/talha/IdeaProjects/EAPSCO/client/src/components/product/ups.js",["119","120","121"],"import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport {\n    Button,\n    Grid,\n    Paper,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    TextField,\n    Typography\n} from \"@material-ui/core\";\n\nimport ProductBar from \"./productBar\"\n\nconst UPS = (props) => {\n    let [rows, setRows] = useState(null)\n    const [id, setId] = useState(\"\");\n    const [price, setPrice] = useState(\"\");\n    const [sold, setSold] = useState(\"\");\n    const [capacity, setCapacity] = useState(\"\");\n    const [dimensions, setDimensions] = useState(\"\");\n    const [voltage, setVoltage] = useState(\"\");\n\n    useEffect(async () => {\n        rows = await rowValues()\n    }, [])\n\n    const rowValues = async () => {\n        let products;\n        let data = []\n\n        try {\n            const res = await axios({method: \"get\", url: \"/products\"})\n            products = res.data\n        } catch (e) {\n            console.log(e)\n        }\n\n        await Promise.all(products._embedded.upses.map(async g => {\n            const customerId = await getId(\"/upses/\" + g._links.self.href.split(\"/\").pop() + \"/customer\")\n            const officeIds = await getIds(\"/upses/\" + g._links.self.href.split(\"/\").pop() + \"/offices\", \"offices\")\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.price, g.type, g.sold ? \"True\" : \"False\", g.capacity, g.dimensions, g.voltage, customerId, officeIds))\n        }))\n\n\n        data.sort((a, b) => {\n            return a.id - b.id\n        })\n\n        setRows(data)\n    }\n\n    const getId = async (href) => {\n        let id ;\n        try {\n            const res = await axios({method : \"GET\" , url : href})\n            id = res.data._links.self.href.split(\"/\").pop()\n        } catch (e) {\n            id = \" \"\n        }\n        return id;\n    }\n\n    const getIds = async (href,partialUrl) => {\n        let ids = \"\"\n        try {\n            const res = await axios({method : \"GET\" , url : href})\n            res.data._embedded[partialUrl].map((d => {\n                ids += d._links.self.href.split(\"/\").pop() + \" \"\n            }))\n        } catch (e) {\n            ids = \" \"\n        }\n\n        return ids;\n    }\n\n\n    const createData = (id, price, type, sold, capacity, dimensions, voltage, customerId, officeIds) => {\n        return {id, price, type, sold, capacity, dimensions, voltage, customerId, officeIds}\n    }\n\n    const handleCreate = async (event) => {\n        await axios({method: \"POST\", url: \"/upses\", data: {type: \"u\", price, sold, capacity, dimensions, voltage}})\n            .then((res) => console.log(res))\n            .catch((err) => console.log(err))\n    }\n\n    const handleUpdate = async (event) => {\n        await axios({\n            method: \"PUT\",\n            url: \"/upses/\" + id,\n            data: {price: price, sold: sold, capacity, dimensions, voltage}\n        })\n            .then((res) => console.log(res))\n            .catch((err) => console.log(err))\n    }\n\n    return (\n        <Grid container justify=\"center\" style={{background: \"#FFF\"}}>\n            <ProductBar/>\n            <Grid item xs={6} align=\"center\">\n                <Typography variant=\"h5\">Create a UPS</Typography>\n                {<form noValidate autoComplete=\"off\">\n                    <TextField label=\"Price\" value={price} onChange={(event) => setPrice(event.target.value)}/> <br/>\n                    <TextField label=\"Sold\" value={sold} onChange={(event) => setSold(event.target.value)}/> <br/>\n                    <TextField label=\"Capacity\" value={capacity} onChange={(event) => setCapacity(event.target.value)}/>\n                    <br/>\n                    <TextField label=\"Dimensions\" value={dimensions}\n                               onChange={(event) => setDimensions(event.target.value)}/> <br/>\n                    <TextField label=\"Voltage\" value={voltage} onChange={(event) => setVoltage(event.target.value)}/>\n                    <br/>\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}} onClick={handleCreate}>Create</Button>\n                </form>}\n\n            </Grid>\n            <Grid item xs={6} align=\"center\">\n                <Typography variant=\"h5\">Update a UPS</Typography>\n                {<form noValidate autoComplete=\"off\">\n                    <TextField label=\"ID\" value={id} onChange={(event) => setId(event.target.value)}/> <br/>\n                    <TextField label=\"Price\" value={price} onChange={(event) => setPrice(event.target.value)}/> <br/>\n                    <TextField label=\"Sold\" value={sold} onChange={(event) => setSold(event.target.value)}/> <br/>\n                    <TextField label=\"Capacity\" value={capacity} onChange={(event) => setCapacity(event.target.value)}/>\n                    <br/>\n                    <TextField label=\"Dimensions\" value={dimensions}\n                               onChange={(event) => setDimensions(event.target.value)}/> <br/>\n                    <TextField label=\"Voltage\" value={voltage} onChange={(event) => setVoltage(event.target.value)}/>\n                    <br/>\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}} onClick={handleUpdate}>Update</Button>\n                </form>}\n            </Grid>\n            <Grid item xs={12} align=\"center\">\n                <Typography variant=\"h5\">All UPSES</Typography>\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell align=\"left\">ID</TableCell>\n                            <TableCell align=\"left\">Price</TableCell>\n                            <TableCell align=\"right\">Type</TableCell>\n                            <TableCell align=\"right\">Sold</TableCell>\n                            <TableCell align=\"right\">Capacity</TableCell>\n                            <TableCell align=\"right\">Dimensions</TableCell>\n                            <TableCell align=\"right\">Voltage</TableCell>\n                            <TableCell align=\"right\">Customer ID</TableCell>\n                            <TableCell align=\"right\">Office IDS</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows != null ? rows.map(row => {\n                            return (\n                                <TableRow key={row.id}>\n                                    <TableCell>{row.id}</TableCell>\n                                    <TableCell>{row.price}</TableCell>\n                                    <TableCell>{row.type}</TableCell>\n                                    <TableCell>{row.sold}</TableCell>\n                                    <TableCell>{row.capacity}</TableCell>\n                                    <TableCell>{row.dimensions}</TableCell>\n                                    <TableCell>{row.voltage}</TableCell>\n                                    <TableCell>{row.customerId}</TableCell>\n                                    <TableCell>{row.officeIds}</TableCell>\n                                </TableRow>\n                            )\n                        }) : null}\n                    </TableBody>\n                </TableContainer>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default UPS;","/home/talha/IdeaProjects/EAPSCO/client/src/components/customer/customer.js",["122","123","124","125"],"/home/talha/IdeaProjects/EAPSCO/client/src/components/customer/customerBar.js",[],"/home/talha/IdeaProjects/EAPSCO/client/src/components/customer/individualCustomer.js",["126","127","128"],"import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport {\n    Button,\n    Grid,\n    Paper,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    TextField,\n    Typography\n} from \"@material-ui/core\";\n\nimport CustomerBar from \"./customerBar\"\n\nconst IndividualCustomer = (props) => {\n    let [rows, setRows] = useState(null)\n    const [id, setId] = useState(\"\")\n    const [address, setAddress] = useState(\"\")\n    const [phoneNumber, setPhoneNumber] = useState(\"\")\n    const [name, setName] = useState(\"\")\n    const [surname, setSurname] = useState(\"\")\n\n\n    useEffect(async () => {\n        rows = await rowValues()\n    }, [])\n\n    const rowValues = async () => {\n        let customers;\n        let data = []\n\n        await axios({method: \"get\", url: \"/customers\"})\n            .then(res => customers = res.data)\n            .catch(err => console.log(err))\n\n        customers._embedded.individualCustomers.map(g => {\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.address, g.phoneNumber, g.type, g.name, g.surname))\n        })\n\n        data.sort((a, b) => {\n            return a.id - b.id\n        })\n\n        setRows(data)\n    }\n\n    const createData = (id, address, phoneNumber, type, name, surname) => {\n        return {id, address, phoneNumber, type, name, surname,}\n    }\n\n    const handleCreate = async (event) => {\n        await axios({\n            method: \"POST\",\n            url: \"/individualCustomers\",\n            data: {type: \"i\", address, phoneNumber, name, surname}\n        })\n            .then((res) => console.log(res))\n            .catch((err) => console.log(err))\n    }\n\n    const handleUpdate = async (event) => {\n        await axios({method: \"PUT\", url: \"/individualCustomers/\" + id, data: {address, phoneNumber, name, surname}})\n            .then((res) => console.log(res))\n            .catch((err) => console.log(err))\n    }\n\n    return (\n        <Grid container justify=\"center\" style={{background: \"#FFF\"}}>\n            <CustomerBar/>\n            <Grid item xs={6} align=\"center\">\n                <Typography variant=\"h5\">Create an Individual Customer</Typography>\n                {<form noValidate autoComplete=\"off\">\n                    <TextField label=\"Address\" value={address} onChange={(event) => setAddress(event.target.value)}/>\n                    <br/>\n                    <TextField label=\"Phone Number\" value={phoneNumber}\n                               onChange={(event) => setPhoneNumber(event.target.value)}/> <br/>\n                    <TextField label=\"Name\" value={name} onChange={(event) => setName(event.target.value)}/> <br/>\n                    <TextField label=\"Surname\" value={surname} onChange={(event) => setSurname(event.target.value)}/>\n                    <br/>\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}} onClick={handleCreate}>Create</Button>\n                </form>}\n            </Grid>\n            <Grid item xs={6} align=\"center\">\n                <Typography variant=\"h5\">Update an Individual Customer</Typography>\n                {<form noValidate autoComplete=\"off\">\n                    <TextField label=\"ID\" value={id} onChange={(event) => setId(event.target.value)}/> <br/>\n                    <TextField label=\"Address\" value={address} onChange={(event) => setAddress(event.target.value)}/>\n                    <br/>\n                    <TextField label=\"Phone Number\" value={phoneNumber}\n                               onChange={(event) => setPhoneNumber(event.target.value)}/> <br/>\n                    <TextField label=\"Name\" value={name} onChange={(event) => setName(event.target.value)}/> <br/>\n                    <TextField label=\"Surname\" value={surname} onChange={(event) => setSurname(event.target.value)}/>\n                    <br/>\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}} onClick={handleUpdate}>Update</Button>\n                </form>}\n            </Grid>\n            <Grid item xs={12} align=\"center\">\n                <Typography variant=\"h5\">All Individual Customers</Typography>\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell align=\"left\">ID</TableCell>\n                            <TableCell align=\"left\">Address</TableCell>\n                            <TableCell align=\"right\">PhoneNumber</TableCell>\n                            <TableCell align=\"right\">Type</TableCell>\n                            <TableCell align=\"right\">Name</TableCell>\n                            <TableCell align=\"right\">Surname</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows != null ? rows.map(row => {\n                            return (\n                                <TableRow key={row.id}>\n                                    <TableCell>{row.id}</TableCell>\n                                    <TableCell>{row.address}</TableCell>\n                                    <TableCell>{row.phoneNumber}</TableCell>\n                                    <TableCell>{row.type}</TableCell>\n                                    <TableCell>{row.name}</TableCell>\n                                    <TableCell>{row.surname}</TableCell>\n                                </TableRow>\n                            )\n                        }) : null}\n                    </TableBody>\n                </TableContainer>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default IndividualCustomer;","/home/talha/IdeaProjects/EAPSCO/client/src/components/customer/enterprise.js",["129","130","131"],"import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport {\n    Button,\n    Grid,\n    Paper,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    TextField,\n    Typography\n} from \"@material-ui/core\";\n\nimport CustomerBar from \"./customerBar\"\n\nconst Enterprise = (props) => {\n    let [rows, setRows] = useState(null)\n    const [id, setId] = useState(\"\")\n    const [address, setAddress] = useState(\"\")\n    const [phoneNumber, setPhoneNumber] = useState(\"\")\n    const [enterpriseName, setEnterpriseName] = useState(\"\")\n\n    useEffect(async () => {\n        rows = await rowValues()\n    }, [])\n\n    const rowValues = async () => {\n        let customers;\n        let data = []\n\n        await axios({method: \"get\", url: \"/customers\"})\n            .then(res => customers = res.data)\n            .catch(err => console.log(err))\n\n        console.log(customers)\n\n        customers._embedded.enterprises.map(g => {\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.address, g.phoneNumber, g.enterpriseName, g.type))\n        })\n\n        data.sort((a, b) => {\n            return a.id - b.id\n        })\n\n        setRows(data)\n    }\n\n    const createData = (id, address, phoneNumber, enterpriseName, type) => {\n        return {id, address, phoneNumber, enterpriseName, type}\n    }\n\n    const handleCreate = async (event) => {\n        await axios({method: \"POST\", url: \"/enterprises\", data: {type: \"e\", address, phoneNumber, enterpriseName}})\n            .then((res) => console.log(res))\n            .catch((err) => console.log(err))\n    }\n\n    const handleUpdate = async (event) => {\n        await axios({method: \"PUT\", url: \"/enterprises/\" + id, data: {address, phoneNumber, enterpriseName}})\n            .then((res) => console.log(res))\n            .catch((err) => console.log(err))\n    }\n\n    return (\n        <Grid container justify=\"center\" style={{background: \"#FFF\"}}>\n            <CustomerBar/>\n            <Grid item xs={6} align=\"center\">\n                <Typography variant=\"h5\">Create an Individual Customer</Typography>\n                {<form noValidate autoComplete=\"off\">\n                    <TextField label=\"Address\" value={address} onChange={(event) => setAddress(event.target.value)}/>\n                    <br/>\n                    <TextField label=\"Phone Number\" value={phoneNumber}\n                               onChange={(event) => setPhoneNumber(event.target.value)}/> <br/>\n                    <TextField label=\"Enterprise Name\" value={enterpriseName}\n                               onChange={(event) => setEnterpriseName(event.target.value)}/> <br/>\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}} onClick={handleCreate}>Create</Button>\n                </form>}\n            </Grid>\n            <Grid item xs={6} align=\"center\">\n                <Typography variant=\"h5\">Update an Individual Customer</Typography>\n                {<form noValidate autoComplete=\"off\">\n                    <TextField label=\"ID\" value={id} onChange={(event) => setId(event.target.value)}/> <br/>\n                    <TextField label=\"Address\" value={address} onChange={(event) => setAddress(event.target.value)}/>\n                    <br/>\n                    <TextField label=\"Phone Number\" value={phoneNumber}\n                               onChange={(event) => setPhoneNumber(event.target.value)}/> <br/>\n                    <TextField label=\"Enterprise Name\" value={enterpriseName}\n                               onChange={(event) => setEnterpriseName(event.target.value)}/> <br/>\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}} onClick={handleUpdate}>Update</Button>\n                </form>}\n            </Grid>\n            <Grid item xs={12} align=\"center\">\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell align=\"left\">ID</TableCell>\n                            <TableCell align=\"left\">Address</TableCell>\n                            <TableCell align=\"right\">PhoneNumber</TableCell>\n                            <TableCell align=\"right\">Type</TableCell>\n                            <TableCell align=\"right\">Enterprise Name</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows != null ? rows.map(row => {\n                            return (\n                                <TableRow key={row.id}>\n                                    <TableCell>{row.id}</TableCell>\n                                    <TableCell>{row.address}</TableCell>\n                                    <TableCell>{row.phoneNumber}</TableCell>\n                                    <TableCell>{row.type}</TableCell>\n                                    <TableCell>{row.enterpriseName}</TableCell>\n                                </TableRow>\n                            )\n                        }) : null}\n                    </TableBody>\n                </TableContainer>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default Enterprise;","/home/talha/IdeaProjects/EAPSCO/client/src/components/employee/employee.js",["132","133","134"],"import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport {\n    Button,\n    Grid,\n    Paper,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    TextField,\n    Typography\n} from \"@material-ui/core\";\n\n\nconst Employee = (props) => {\n    let [rows, setRows] = useState(null)\n    const [id, setId] = useState(\"\")\n    const [name, setName] = useState(\"\")\n    const [surname, setSurname] = useState(\"\")\n    const [mail, setMail] = useState(\"\")\n    const [phoneNumber, setPhoneNumber] = useState(\"\")\n    const [address, setAddress] = useState(\"\")\n    const [birthdate, setBirthDate] = useState(\"\")\n    const [salary, setSalary] = useState(\"\")\n\n    useEffect(async () => {\n        rows = await rowValues()\n    }, [])\n\n    const rowValues = async () => {\n        let employees;\n        let data = []\n\n        try {\n            const res = await axios({method: \"get\", url: \"/employees\"})\n            employees = res.data\n        } catch (e) {\n            console.log(e)\n        }\n\n        await Promise.all(employees._embedded.employees.map(async g => {\n            const officeIds = await getIds(\"/employees/\" + g._links.self.href.split(\"/\").pop() + \"/offices\", \"offices\")\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.name, g.surname, g.mail, g.phoneNumber, g.address, g.age, g.birthdate, g.salary,officeIds))\n        }))\n\n        setRows(data)\n    }\n\n    const getIds = async (href,partialUrl) => {\n        let ids = \"\"\n        try {\n            const res = await axios({method : \"GET\" , url : href})\n            res.data._embedded[partialUrl].map((d => {\n                ids += d._links.self.href.split(\"/\").pop() + \" \"\n            }))\n        } catch (e) {\n            ids = \" \"\n        }\n\n        return ids;\n    }\n\n    const createData = (id, name, surname, mail, phoneNumber, address, age, birthdate, salary,officeIds) => {\n        return {id, name, surname, mail, phoneNumber, address, age, birthdate, salary, officeIds}\n    }\n\n    const handleCreate = async (event) => {\n        await axios({\n            method: \"POST\",\n            url: \"/employees\",\n            data: {name, surname, mail, phoneNumber, address, birthdate, salary}\n        })\n            .then((res) => console.log(res))\n            .catch((err) => console.log(err))\n    }\n\n    const handleUpdate = async (event) => {\n        await axios({\n            method: \"PUT\",\n            url: \"/employees/\" + id,\n            data: {name, surname, mail, phoneNumber, address, birthdate, salary}\n        })\n            .then((res) => console.log(res))\n            .catch((err) => console.log(err))\n    }\n\n    return (\n        <Grid container justify=\"center\" style={{background: \"#FFF\"}}>\n            <Grid item xs={6} align=\"center\">\n                <Typography variant=\"h5\">Create a Employee</Typography>\n                {<form noValidate autoComplete=\"off\">\n                    <TextField label=\"Name\" value={name} onChange={(event) => setName(event.target.value)}/> <br/>\n                    <TextField label=\"Surname\" value={surname} onChange={(event) => setSurname(event.target.value)}/>\n                    <br/>\n                    <TextField label=\"Mail\" value={mail} onChange={(event) => setMail(event.target.value)}/> <br/>\n                    <TextField label=\"Phone Number\" value={phoneNumber}\n                               onChange={(event) => setPhoneNumber(event.target.value)}/> <br/>\n                    <TextField label=\"Address\" value={address} onChange={(event) => setAddress(event.target.value)}/>\n                    <br/>\n                    <TextField label=\"Birthdate\" value={birthdate}\n                               onChange={(event) => setBirthDate(event.target.value)}/> <br/>\n                    <TextField label=\"Salary\" value={salary} onChange={(event) => setSalary(event.target.value)}/> <br/>\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}} onClick={handleCreate}>Create</Button>\n                </form>}\n            </Grid>\n            <Grid item xs={6} align=\"center\">\n                <Typography variant=\"h5\">Update a Employee</Typography>\n                {<form noValidate autoComplete=\"off\">\n                    <TextField label=\"ID\" value={id} onChange={(event) => setId(event.target.value)}/> <br/>\n                    <TextField label=\"Name\" value={name} onChange={(event) => setName(event.target.value)}/> <br/>\n                    <TextField label=\"Surname\" value={surname} onChange={(event) => setSurname(event.target.value)}/>\n                    <br/>\n                    <TextField label=\"Mail\" value={mail} onChange={(event) => setMail(event.target.value)}/> <br/>\n                    <TextField label=\"Phone Number\" value={phoneNumber}\n                               onChange={(event) => setPhoneNumber(event.target.value)}/> <br/>\n                    <TextField label=\"Address\" value={address} onChange={(event) => setAddress(event.target.value)}/>\n                    <br/>\n                    <TextField label=\"Birthdate\" value={birthdate}\n                               onChange={(event) => setBirthDate(event.target.value)}/> <br/>\n                    <TextField label=\"Salary\" value={salary} onChange={(event) => setSalary(event.target.value)}/> <br/>\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}} onClick={handleUpdate}>Update</Button>\n                </form>}\n            </Grid>\n            <Grid item xs={12} align=\"center\">\n                <Typography variant=\"h5\">All Employees </Typography>\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell align=\"left\">ID</TableCell>\n                            <TableCell align=\"left\">Name</TableCell>\n                            <TableCell align=\"right\">Surname</TableCell>\n                            <TableCell align=\"right\">Mail</TableCell>\n                            <TableCell align=\"right\">Phone Number</TableCell>\n                            <TableCell align=\"right\">Address</TableCell>\n                            <TableCell align=\"right\">Age</TableCell>\n                            <TableCell align=\"right\">Birthdate</TableCell>\n                            <TableCell align=\"right\">Salary</TableCell>\n                            <TableCell align=\"right\">Office IDs</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows != null ? rows.map(row => {\n                            return (\n                                <TableRow key={row.id}>\n                                    <TableCell>{row.id}</TableCell>\n                                    <TableCell>{row.name}</TableCell>\n                                    <TableCell>{row.surname}</TableCell>\n                                    <TableCell>{row.mail}</TableCell>\n                                    <TableCell>{row.phoneNumber}</TableCell>\n                                    <TableCell>{row.address}</TableCell>\n                                    <TableCell>{row.age}</TableCell>\n                                    <TableCell>{row.birthdate}</TableCell>\n                                    <TableCell>{row.salary}</TableCell>\n                                    <TableCell>{row.officeIds}</TableCell>\n                                </TableRow>\n                            )\n                        }) : null}\n                    </TableBody>\n                </TableContainer>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default Employee;","/home/talha/IdeaProjects/EAPSCO/client/src/components/office/offices.js",["135","136","137"],"import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport {\n    Button,\n    Grid,\n    Paper,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    TextField,\n    Typography\n} from \"@material-ui/core\";\n\n\nconst Office = (props) => {\n    let [rows, setRows] = useState(null)\n    const [id, setId] = useState(\"\")\n    const [address, setAddress] = useState(\"\")\n    const [phoneNumber, setPhoneNumber] = useState(\"\")\n\n    useEffect(async () => {\n        rows = await rowValues()\n    }, [])\n\n    const rowValues = async () => {\n        let offices;\n        let data = []\n\n        try {\n            const res = await axios({method: \"get\", url: \"/offices\"})\n            offices = res.data\n        } catch (e) {\n            console.log(e)\n        }\n\n\n        await Promise.all(offices._embedded.offices.map(async g => {\n            const materialDates = await getIds(\"/offices/\" + g._links.self.href.split(\"/\").pop() + \"/materials\", \"materials\")\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.address, g.phoneNumber, materialDates))\n        }))\n\n        setRows(data)\n    }\n\n    const getIds = async (href, partialUrl) => {\n        let ids = \"\"\n        try {\n            const res = await axios({method: \"GET\", url: href})\n            res.data._embedded[partialUrl].map((d => {\n                ids += d._links.self.href.split(\"/\").pop() + \", \"\n            }))\n        } catch (e) {\n            ids = \" \"\n        }\n\n        return ids;\n    }\n\n    const createData = (id, address, phoneNumber, materialDates) => {\n        return {id, address, phoneNumber, materialDates}\n    }\n\n    const handleCreate = async (event) => {\n        await axios({method: \"POST\", url: \"/offices\", data: {address, phoneNumber}})\n            .then((res) => console.log(res))\n            .catch((err) => console.log(err))\n    }\n\n    const handleUpdate = async (event) => {\n        await axios({method: \"PUT\", url: \"/offices/\" + id, data: {address, phoneNumber}})\n            .then((res) => console.log(res))\n            .catch((err) => console.log(err))\n    }\n\n    return (\n        <Grid container justify=\"center\" style={{background: \"#FFF\"}}>\n            <Grid item xs={6} align=\"center\">\n                <Typography variant=\"h5\">Create a Office</Typography>\n                {<form noValidate autoComplete=\"off\">\n                    <TextField label=\"Address\" value={address} onChange={(event) => setAddress(event.target.value)}/>\n                    <br/>\n                    <TextField label=\"PhoneNumber\" value={phoneNumber}\n                               onChange={(event) => setPhoneNumber(event.target.value)}/> <br/>\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}}\n                            onClick={handleCreate}>Create</Button>\n                </form>}\n            </Grid>\n            <Grid item xs={6} align=\"center\">\n                <Typography variant=\"h5\">Update a Office</Typography>\n                {<form noValidate autoComplete=\"off\">\n                    <TextField label=\"ID\" value={id} onChange={(event) => setId(event.target.value)}/> <br/>\n                    <TextField label=\"Address\" value={address} onChange={(event) => setAddress(event.target.value)}/>\n                    <br/>\n                    <TextField label=\"PhoneNumber\" value={phoneNumber}\n                               onChange={(event) => setPhoneNumber(event.target.value)}/> <br/>\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}}\n                            onClick={handleUpdate}>Update</Button>\n                </form>}\n            </Grid>\n            <Grid item xs={12} align=\"center\">\n                <Typography variant=\"h5\">All Offices</Typography>\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell align=\"left\">ID</TableCell>\n                            <TableCell align=\"left\">Address</TableCell>\n                            <TableCell align=\"right\">Phone Number</TableCell>\n                            <TableCell align=\"right\">Material Dates</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows != null ? rows.map(row => {\n                            return (\n                                <TableRow key={row.id}>\n                                    <TableCell>{row.id}</TableCell>\n                                    <TableCell>{row.address}</TableCell>\n                                    <TableCell>{row.phoneNumber}</TableCell>\n                                    <TableCell>{row.materialDates}</TableCell>\n                                </TableRow>\n                            )\n                        }) : null}\n                    </TableBody>\n                </TableContainer>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default Office;","/home/talha/IdeaProjects/EAPSCO/client/src/components/service/service.js",["138","139"],"import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport {\n    Button,\n    Grid,\n    Paper,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    TextField,\n    Typography\n} from \"@material-ui/core\";\n\n\nconst Service = (props) => {\n    let [rows, setRows] = useState(null)\n    const [id, setId] = useState(\"\")\n    const [startDate, setStartDate] = useState(\"\")\n    const [endDate, setEndDate] = useState(\"\")\n    const [cost, setCost] = useState(\"\")\n\n    useEffect(async () => {\n        rows = await rowValues()\n    }, [])\n\n    const rowValues = async () => {\n        let services;\n        let data = []\n\n        try {\n            const res = await axios({method: \"get\", url: \"/services\"})\n            services = res.data\n        } catch (e) {\n            console.log(e)\n        }\n\n        await Promise.all(services._embedded.services.map(async g => {\n            const officeId = await getId(\"/services/\" + g._links.self.href.split(\"/\").pop() + \"/office\")\n            const customerId = await getId(\"/services/\" + g._links.self.href.split(\"/\").pop() + \"/customer\")\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.startDate, g.endDate, g.duration, g.cost, customerId, officeId))\n        }))\n\n        setRows(data)\n    }\n\n    const getId = async (href) => {\n        let id;\n        try {\n            const res = await axios({method: \"GET\", url: href})\n            id = res.data._links.self.href.split(\"/\").pop()\n        } catch (e) {\n            id = \" \"\n        }\n\n        return id;\n    }\n\n    const createData = (id, startDate, endDate, duration, cost, customerId, officeId) => {\n        return {id, startDate, endDate, duration, cost, customerId, officeId}\n    }\n\n    const handleCreate = async (event) => {\n        await axios({method: \"POST\", url: \"/services\", data: {startDate, endDate, cost}})\n            .then((res) => console.log(res))\n            .catch((err) => console.log(err))\n    }\n\n    const handleUpdate = async (event) => {\n        await axios({method: \"PUT\", url: \"/services/\" + id, data: {startDate, endDate, cost}})\n            .then((res) => console.log(res))\n            .catch((err) => console.log(err))\n    }\n\n    return (\n        <Grid container justify=\"center\" style={{background: \"#FFF\"}}>\n            <Grid item xs={6} align=\"center\">\n                <Typography variant=\"h5\">Create a Service</Typography>\n                {<form noValidate autoComplete=\"off\">\n                    <TextField label=\"Start Date\" value={startDate}\n                               onChange={(event) => setStartDate(event.target.value)}/> <br/>\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}}\n                            onClick={handleCreate}>Create</Button>\n                </form>}\n            </Grid>\n            <Grid item xs={6} align=\"center\">\n                <Typography variant=\"h5\">Update a Service</Typography>\n                {<form noValidate autoComplete=\"off\">\n                    <TextField label=\"ID\" value={id} onChange={(event) => setId(event.target.value)}/> <br/>\n                    <TextField label=\"Start Date\" value={startDate}\n                               onChange={(event) => setStartDate(event.target.value)}/> <br/>\n                    <TextField label=\"EndDate\" value={endDate} onChange={(event) => setEndDate(event.target.value)}/>\n                    <br/>\n                    <TextField label=\"Cost\" value={cost} onChange={(event) => setCost(event.target.value)}/> <br/>\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}}\n                            onClick={handleUpdate}>Update</Button>\n                </form>}\n            </Grid>\n            <Grid item xs={12} align=\"center\">\n                <Typography variant=\"h5\">All Services</Typography>\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell align=\"left\">ID</TableCell>\n                            <TableCell align=\"left\">Start Date</TableCell>\n                            <TableCell align=\"right\">End Date</TableCell>\n                            <TableCell align=\"right\">Duration</TableCell>\n                            <TableCell align=\"right\">Cost</TableCell>\n                            <TableCell align=\"right\">Customer ID</TableCell>\n                            <TableCell align=\"right\">Office ID</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows != null ? rows.map(row => {\n                            return (\n                                <TableRow key={row.id}>\n                                    <TableCell>{row.id}</TableCell>\n                                    <TableCell>{row.startDate}</TableCell>\n                                    <TableCell>{row.endDate}</TableCell>\n                                    <TableCell>{row.duration}</TableCell>\n                                    <TableCell>{row.cost}</TableCell>\n                                    <TableCell>{row.customerId}</TableCell>\n                                    <TableCell>{row.officeId}</TableCell>\n                                </TableRow>\n                            )\n                        }) : null}\n                    </TableBody>\n                </TableContainer>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default Service;","/home/talha/IdeaProjects/EAPSCO/client/src/components/supplier/supplier.js",["140","141","142"],"import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport {\n    Button,\n    Grid,\n    Paper,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    TextField,\n    Typography\n} from \"@material-ui/core\";\n\n\nconst Office = (props) => {\n    let [rows, setRows] = useState(null)\n    const [id, setId] = useState(\"\")\n    const [name, setName] = useState(\"\")\n    const [address, setAddress] = useState(\"\")\n    const [mail, setMail] = useState(\"\")\n    const [phoneNumber, setPhoneNumber] = useState(\"\")\n\n    useEffect(async () => {\n        rows = await rowValues()\n    }, [])\n\n    const rowValues = async () => {\n        let suppliers;\n        let data = []\n\n        try {\n            const res = await axios({method: \"get\", url: \"/suppliers\"})\n            suppliers = res.data\n        } catch (e) {\n            console.log(e)\n        }\n\n\n        await Promise.all(suppliers._embedded.suppliers.map(async g => {\n            const materialDates = await getIds(\"/suppliers/\" + g._links.self.href.split(\"/\").pop() + \"/materials\", \"materials\")\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.name, g.address, g.mail, g.phoneNumber, materialDates))\n        }))\n\n        setRows(data)\n    }\n\n    const getIds = async (href, partialUrl) => {\n        let ids = \"\"\n        try {\n            const res = await axios({method: \"GET\", url: href})\n            res.data._embedded[partialUrl].map((d => {\n                ids += d._links.self.href.split(\"/\").pop() + \", \"\n            }))\n        } catch (e) {\n            ids = \" \"\n        }\n\n        return ids;\n    }\n\n    const createData = (id, name, address, mail, phoneNumber, materialDates) => {\n        return {id, name, address, mail, phoneNumber, materialDates}\n    }\n\n    const handleCreate = async (event) => {\n        await axios({method: \"POST\", url: \"/suppliers\", data: {name, address, mail, phoneNumber}})\n            .then((res) => console.log(res))\n            .catch((err) => console.log(err))\n    }\n\n    const handleUpdate = async (event) => {\n        await axios({method: \"PUT\", url: \"/suppliers/\" + id, data: {name, address, mail, phoneNumber}})\n            .then((res) => console.log(res))\n            .catch((err) => console.log(err))\n    }\n\n    return (\n        <Grid container justify=\"center\" style={{background: \"#FFF\"}}>\n            <Grid item xs={6} align=\"center\">\n                <Typography variant=\"h5\">Create a Supplier</Typography>\n                {<form noValidate autoComplete=\"off\">\n                    <TextField label=\"Name\" value={name} onChange={(event) => setName(event.target.value)}/> <br/>\n                    <TextField label=\"Address\" value={address} onChange={(event) => setAddress(event.target.value)}/>\n                    <br/>\n                    <TextField label=\"Mail\" value={mail} onChange={(event) => setMail(event.target.value)}/> <br/>\n                    <TextField label=\"Phone Number\" value={phoneNumber}\n                               onChange={(event) => setPhoneNumber(event.target.value)}/> <br/>\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}}\n                            onClick={handleCreate}>Create</Button>\n                </form>}\n            </Grid>\n            <Grid item xs={6} align=\"center\">\n                <Typography variant=\"h5\">Update a Supplier</Typography>\n                {<form noValidate autoComplete=\"off\">\n                    <TextField label=\"ID\" value={id} onChange={(event) => setId(event.target.value)}/> <br/>\n                    <TextField label=\"Name\" value={name} onChange={(event) => setName(event.target.value)}/> <br/>\n                    <TextField label=\"Address\" value={address} onChange={(event) => setAddress(event.target.value)}/>\n                    <br/>\n                    <TextField label=\"Mail\" value={mail} onChange={(event) => setMail(event.target.value)}/> <br/>\n                    <TextField label=\"Phone Number\" value={phoneNumber}\n                               onChange={(event) => setPhoneNumber(event.target.value)}/> <br/>\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}}\n                            onClick={handleUpdate}>Update</Button>\n                </form>}\n            </Grid>\n            <Grid item xs={12} align=\"center\">\n                <Typography variant=\"h5\">All Suppliers</Typography>\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell align=\"left\">ID</TableCell>\n                            <TableCell align=\"left\">Name</TableCell>\n                            <TableCell align=\"left\">Address</TableCell>\n                            <TableCell align=\"left\">Mail</TableCell>\n                            <TableCell align=\"right\">Phone Number</TableCell>\n                            <TableCell align=\"right\">Material Dates</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows != null ? rows.map(row => {\n                            return (\n                                <TableRow key={row.id}>\n                                    <TableCell>{row.id}</TableCell>\n                                    <TableCell>{row.name}</TableCell>\n                                    <TableCell>{row.address}</TableCell>\n                                    <TableCell>{row.mail}</TableCell>\n                                    <TableCell>{row.phoneNumber}</TableCell>\n                                    <TableCell>{row.materialDates}</TableCell>\n                                </TableRow>\n                            )\n                        }) : null}\n                    </TableBody>\n                </TableContainer>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default Office;","/home/talha/IdeaProjects/EAPSCO/client/src/components/materials/materials.js",["143","144","145"],"import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport {\n    Button,\n    Grid,\n    Paper,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    TextField,\n    Typography\n} from \"@material-ui/core\";\n\n\nconst Material = (props) => {\n    let [rows, setRows] = useState(null)\n    const [id, setId] = useState(\"\")\n    const [type, setType] = useState(\"\")\n    const [amount, setAmount] = useState(\"\")\n    const [price, setPrice] = useState(\"\")\n\n    useEffect(async () => {\n        rows = await rowValues()\n    }, [])\n\n    const rowValues = async () => {\n        let materials;\n        let data = []\n\n        await axios({method: \"get\", url: \"/materials\"})\n            .then(res => materials = res.data)\n            .catch(err => console.log(err))\n\n        console.log(materials)\n\n        materials._embedded.materials.map(g => {\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.type, g.amount, g.price))\n        })\n\n        setRows(data)\n    }\n\n    const createData = (id, type, amount, price) => {\n        return {id, type, amount, price}\n    }\n\n    const handleCreate = async (event) => {\n        await axios({method: \"POST\", url: \"/materials\", data: {type, amount, price}})\n            .then((res) => console.log(res))\n            .catch((err) => console.log(err))\n    }\n\n    const handleUpdate = async (event) => {\n        await axios({method: \"PUT\", url: \"/suppliers/\" + id, data: {type, amount, price}})\n            .then((res) => console.log(res))\n            .catch((err) => console.log(err))\n    }\n\n    return (\n        <Grid container justify=\"center\" style={{background: \"#FFF\"}}>\n            <Grid item xs={6} align=\"center\">\n                <Typography variant=\"h5\">Create a Supplier</Typography>\n                {<form noValidate autoComplete=\"off\">\n                    <TextField label=\"Type\" value={type} onChange={(event) => setType(event.target.value)}/> <br/>\n                    <TextField label=\"Amount\" value={amount} onChange={(event) => setAmount(event.target.value)}/> <br/>\n                    <TextField label=\"Price\" value={price} onChange={(event) => setPrice(event.target.value)}/> <br/>\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}}\n                            onClick={handleCreate}>Create</Button>\n                </form>}\n            </Grid>\n            <Grid item xs={6} align=\"center\">\n                <Typography variant=\"h5\">Update a Supplier</Typography>\n                {<form noValidate autoComplete=\"off\">\n                    <TextField label=\"ID\" value={id} onChange={(event) => setId(event.target.value)}/> <br/>\n                    <TextField label=\"Type\" value={type} onChange={(event) => setType(event.target.value)}/> <br/>\n                    <TextField label=\"Amount\" value={amount} onChange={(event) => setAmount(event.target.value)}/> <br/>\n                    <TextField label=\"Price\" value={price} onChange={(event) => setPrice(event.target.value)}/> <br/>\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}}\n                            onClick={handleUpdate}>Update</Button>\n                </form>}\n            </Grid>\n            <Grid item xs={12} align=\"center\">\n                <Typography variant=\"h5\">All Materials</Typography>\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell align=\"left\">ID</TableCell>\n                            <TableCell align=\"left\">Type</TableCell>\n                            <TableCell align=\"right\">Amount</TableCell>\n                            <TableCell align=\"right\">Price</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows != null ? rows.map(row => {\n                            return (\n                                <TableRow key={row.id}>\n                                    <TableCell>{row.id}</TableCell>\n                                    <TableCell>{row.type}</TableCell>\n                                    <TableCell>{row.amount}</TableCell>\n                                    <TableCell>{row.price}</TableCell>\n                                </TableRow>\n                            )\n                        }) : null}\n                    </TableBody>\n                </TableContainer>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default Material;","/home/talha/IdeaProjects/EAPSCO/client/src/Procedures.js",[],"/home/talha/IdeaProjects/EAPSCO/client/src/Header.jsx",["146","147","148"],"import React from 'react';\nimport { AppBar, Button, Grid, Toolbar, Typography } from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Action from \"./Action\";\nimport {Route, withRouter} from \"react-router-dom\";\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    typographyStyles: {\n        flex: 1,\n        color: 'white',\n        fontSize: 20,\n        margin: theme.spacing(1),\n    },\n\n    margin: {\n      margin: theme.spacing(1),\n    },\n    extendedIcon: {\n      marginRight: theme.spacing(1),\n    },\n    buttonRoot: {\n        background: 'orange',\n        borderRadius: 5,\n        border: 5,\n        height: 31,\n        margin: theme.spacing(1),\n      }\n    \n  }));\n\nconst Header = props => {\n   \n    const classes = useStyles();\n\n    const handleButtonClick = pageURL => {\n     \n    };\n\n    return (\n    <AppBar position=\"static\">\n        <Toolbar>\n            <Grid container spacing={2} direction=\"column\">\n                <Grid item xs={12} container>\n                    <Grid item xs={5}>\n                      <Typography className={classes.typographyStyles}>\n                        Seri Bobinaj ve Serbosan Energy and Power Systems\n                      </Typography>  \n                    </Grid>\n                    <Grid item xs={2} />\n                    <Grid item xs={1}>\n                        <Button onClick={() => handleButtonClick('/Action')} variant=\"contained\" size=\"small\" color=\"white\" className={classes.buttonRoot}>\n                        Views\n                        </Button>\n                    </Grid>\n                    <Grid item xs={1} />\n                    <Grid item xs={1}>\n                        <Button  variant=\"contained\" size=\"small\" color=\"white\" className={classes.buttonRoot}>\n                        Procedures\n                        </Button>\n                    </Grid>\n                    <Grid item xs={1} />\n                    <Grid item xs={1}>\n                        <Button   variant=\"contained\" size=\"small\" color=\"secondary\" className={classes.margin}>\n                        Logout\n                        </Button>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Toolbar>\n    </AppBar>\n\n\n\n    );\n};\n\nexport default Header;",{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","severity":1,"message":"154","line":14,"column":22,"nodeType":"155","messageId":"156","endLine":14,"endColumn":35},{"ruleId":"157","severity":1,"message":"158","line":32,"column":11,"nodeType":"159","messageId":"160","endLine":42,"endColumn":12},{"ruleId":"161","severity":1,"message":"162","line":64,"column":6,"nodeType":"163","endLine":64,"endColumn":8,"suggestions":"164"},{"ruleId":"153","severity":1,"message":"165","line":2,"column":9,"nodeType":"155","messageId":"156","endLine":2,"endColumn":15},{"ruleId":"153","severity":1,"message":"166","line":50,"column":11,"nodeType":"155","messageId":"156","endLine":50,"endColumn":18},{"ruleId":"161","severity":1,"message":"167","line":25,"column":16,"nodeType":"168","endLine":25,"endColumn":27},{"ruleId":"169","severity":1,"message":"170","line":88,"column":51,"nodeType":"171","messageId":"172","endLine":88,"endColumn":53},{"ruleId":"161","severity":1,"message":"173","line":27,"column":15,"nodeType":"171","endLine":29,"endColumn":6},{"ruleId":"161","severity":1,"message":"167","line":28,"column":16,"nodeType":"174","endLine":28,"endColumn":33},{"ruleId":"169","severity":1,"message":"170","line":71,"column":51,"nodeType":"171","messageId":"172","endLine":71,"endColumn":53},{"ruleId":"161","severity":1,"message":"173","line":27,"column":15,"nodeType":"171","endLine":29,"endColumn":6},{"ruleId":"161","severity":1,"message":"167","line":28,"column":16,"nodeType":"174","endLine":28,"endColumn":33},{"ruleId":"169","severity":1,"message":"170","line":72,"column":51,"nodeType":"171","messageId":"172","endLine":72,"endColumn":53},{"ruleId":"161","severity":1,"message":"173","line":27,"column":15,"nodeType":"171","endLine":29,"endColumn":6},{"ruleId":"161","severity":1,"message":"167","line":28,"column":16,"nodeType":"174","endLine":28,"endColumn":33},{"ruleId":"169","severity":1,"message":"170","line":71,"column":51,"nodeType":"171","messageId":"172","endLine":71,"endColumn":53},{"ruleId":"161","severity":1,"message":"173","line":10,"column":15,"nodeType":"171","endLine":12,"endColumn":6},{"ruleId":"161","severity":1,"message":"167","line":11,"column":16,"nodeType":"174","endLine":11,"endColumn":33},{"ruleId":"169","severity":1,"message":"170","line":25,"column":55,"nodeType":"171","messageId":"172","endLine":25,"endColumn":57},{"ruleId":"169","severity":1,"message":"170","line":29,"column":47,"nodeType":"171","messageId":"172","endLine":29,"endColumn":49},{"ruleId":"161","severity":1,"message":"173","line":27,"column":15,"nodeType":"171","endLine":29,"endColumn":6},{"ruleId":"161","severity":1,"message":"167","line":28,"column":16,"nodeType":"174","endLine":28,"endColumn":33},{"ruleId":"169","severity":1,"message":"170","line":39,"column":55,"nodeType":"171","messageId":"172","endLine":39,"endColumn":57},{"ruleId":"161","severity":1,"message":"173","line":25,"column":15,"nodeType":"171","endLine":27,"endColumn":6},{"ruleId":"161","severity":1,"message":"167","line":26,"column":16,"nodeType":"174","endLine":26,"endColumn":33},{"ruleId":"169","severity":1,"message":"170","line":39,"column":47,"nodeType":"171","messageId":"172","endLine":39,"endColumn":49},{"ruleId":"161","severity":1,"message":"173","line":28,"column":15,"nodeType":"171","endLine":30,"endColumn":6},{"ruleId":"161","severity":1,"message":"167","line":29,"column":16,"nodeType":"174","endLine":29,"endColumn":33},{"ruleId":"169","severity":1,"message":"170","line":55,"column":51,"nodeType":"171","messageId":"172","endLine":55,"endColumn":53},{"ruleId":"161","severity":1,"message":"173","line":23,"column":15,"nodeType":"171","endLine":25,"endColumn":6},{"ruleId":"161","severity":1,"message":"167","line":24,"column":16,"nodeType":"174","endLine":24,"endColumn":33},{"ruleId":"169","severity":1,"message":"170","line":51,"column":51,"nodeType":"171","messageId":"172","endLine":51,"endColumn":53},{"ruleId":"161","severity":1,"message":"173","line":24,"column":15,"nodeType":"171","endLine":26,"endColumn":6},{"ruleId":"161","severity":1,"message":"167","line":25,"column":16,"nodeType":"174","endLine":25,"endColumn":33},{"ruleId":"161","severity":1,"message":"173","line":25,"column":15,"nodeType":"171","endLine":27,"endColumn":6},{"ruleId":"161","severity":1,"message":"167","line":26,"column":16,"nodeType":"174","endLine":26,"endColumn":33},{"ruleId":"169","severity":1,"message":"170","line":53,"column":51,"nodeType":"171","messageId":"172","endLine":53,"endColumn":53},{"ruleId":"161","severity":1,"message":"173","line":24,"column":15,"nodeType":"171","endLine":26,"endColumn":6},{"ruleId":"161","severity":1,"message":"167","line":25,"column":16,"nodeType":"174","endLine":25,"endColumn":33},{"ruleId":"169","severity":1,"message":"170","line":38,"column":45,"nodeType":"171","messageId":"172","endLine":38,"endColumn":47},{"ruleId":"153","severity":1,"message":"175","line":4,"column":8,"nodeType":"155","messageId":"156","endLine":4,"endColumn":14},{"ruleId":"153","severity":1,"message":"176","line":5,"column":9,"nodeType":"155","messageId":"156","endLine":5,"endColumn":14},{"ruleId":"153","severity":1,"message":"177","line":5,"column":16,"nodeType":"155","messageId":"156","endLine":5,"endColumn":26},"no-native-reassign",["178"],"no-negated-in-lhs",["179"],"no-unused-vars","'setHasAccount' is assigned a value but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'authListener'. Either include it or remove the dependency array.","ArrayExpression",["180"],"'Router' is defined but never used.","'classes' is assigned a value but never used.","Assignments to the 'rows' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","AwaitExpression","'Action' is defined but never used.","'Route' is defined but never used.","'withRouter' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"181","fix":"182"},"Update the dependencies array to be: [authListener]",{"range":"183","text":"184"},[1437,1439],"[authListener]"]
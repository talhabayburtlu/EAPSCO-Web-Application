[{"/home/talha/IdeaProjects/EAPSCO/client/src/index.js":"1","/home/talha/IdeaProjects/EAPSCO/client/src/App.js":"2","/home/talha/IdeaProjects/EAPSCO/client/src/reportWebVitals.js":"3","/home/talha/IdeaProjects/EAPSCO/client/src/Login.js":"4","/home/talha/IdeaProjects/EAPSCO/client/src/Action.js":"5","/home/talha/IdeaProjects/EAPSCO/client/src/fire.js":"6","/home/talha/IdeaProjects/EAPSCO/client/src/components/product/product.js":"7","/home/talha/IdeaProjects/EAPSCO/client/src/components/product/productBar.js":"8","/home/talha/IdeaProjects/EAPSCO/client/src/components/product/generator.js":"9","/home/talha/IdeaProjects/EAPSCO/client/src/components/product/motor.js":"10","/home/talha/IdeaProjects/EAPSCO/client/src/components/product/ups.js":"11"},{"size":509,"mtime":1610358005903,"results":"12","hashOfConfig":"13"},{"size":1959,"mtime":1610358005883,"results":"14","hashOfConfig":"13"},{"size":402,"mtime":1610358005803,"results":"15","hashOfConfig":"13"},{"size":1291,"mtime":1610358005771,"results":"16","hashOfConfig":"13"},{"size":2304,"mtime":1610358005875,"results":"17","hashOfConfig":"13"},{"size":418,"mtime":1610358005755,"results":"18","hashOfConfig":"13"},{"size":2826,"mtime":1610358005739,"results":"19","hashOfConfig":"13"},{"size":796,"mtime":1610358005815,"results":"20","hashOfConfig":"13"},{"size":2869,"mtime":1610358005891,"results":"21","hashOfConfig":"13"},{"size":2788,"mtime":1610358005915,"results":"22","hashOfConfig":"13"},{"size":2872,"mtime":1610358005851,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"18yva1h",{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"29"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"29"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"29"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"29"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"29"},"/home/talha/IdeaProjects/EAPSCO/client/src/index.js",[],"/home/talha/IdeaProjects/EAPSCO/client/src/App.js",["53","54","55"],"import React, { useState, useEffect } from \"react\";\nimport fire from \"./fire\";\nimport './App.css';\nimport Login from \"./Login\";\nimport Action from \"./Action\";\n\n\nfunction App() {\n  const [user, setUser] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [emailError, setEmailError] = useState('');\n  const [passwordError, setPasswordError] = useState('');\n  const [hasAccount, setHasAccount] = useState(true);\n\n  const clearInputs = () => {\n    setEmail('');\n    setPassword('');\n  }\n\n  const clearErrors = () => {\n    setEmailError('');\n    setPasswordError('');\n  }\n\n  const handleLogin = () => {\n    clearErrors();\n      fire\n        .auth()\n        .signInWithEmailAndPassword(email, password)\n        .catch((err) => {\n          switch(err.code){\n            case \"auth/invalid-email\":\n            case \"auth/user-disabled\":\n            case \"auth/user-not-found\":\n              setEmailError(err.message);\n              break;\n            case \"auth/wrong-password\":\n              setPasswordError(err.message);\n              break;\n\n          }\n        })\n        \n  }\n\n  const handleLogout = () => {\n    fire.auth().signOut();\n  }\n\n  const authListener = () => {\n    fire.auth().onAuthStateChanged((user) => {\n      if (user) {\n        clearInputs();\n        setUser(user);\n      }\n      else {\n        setUser(\"\");\n      }\n    })\n}\n\n  useEffect(() => {\n    authListener();\n  }, [])\n\n  return (\n    <div className=\"App\">\n      {user ? (\n        <Action handleLogout={handleLogout}/>\n      ) : (\n        <Login \n      email={email}\n      setEmail={setEmail}\n      password={password}\n      setPassword={setPassword}\n      handleLogin={handleLogin}\n      emailError={emailError}\n      passwordError={passwordError}\n      hasAccount={hasAccount}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n",["56","57"],"/home/talha/IdeaProjects/EAPSCO/client/src/reportWebVitals.js",[],"/home/talha/IdeaProjects/EAPSCO/client/src/Login.js",[],"/home/talha/IdeaProjects/EAPSCO/client/src/Action.js",[],"/home/talha/IdeaProjects/EAPSCO/client/src/fire.js",[],"/home/talha/IdeaProjects/EAPSCO/client/src/components/product/product.js",["58","59","60","61","62","63","64","65"],"import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport {Grid, Paper, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\n\nimport ProductBar from \"./productBar\"\n\nconst Product = (props) => {\n    let [rows, setRows] = useState(null)\n\n    useEffect(async () => {\n        rows = await rowValues()\n    }, [])\n\n    const rowValues = async () => {\n        let products;\n        let data = []\n\n        await axios({method : \"get\", url: \"/products\"})\n        .then(res => products = res.data)\n        .catch(err => console.log(err))\n\n        \n        products._embedded.generators.map(g => {\n            data.push(createData(g._links.self.href.split(\"/\").pop(),g.price,g.type,g.sold ? \"True\" : \"False\"))\n        })\n\n        products._embedded.motors.map(g => {\n            data.push(createData(g._links.self.href.split(\"/\").pop(),g.price,g.type,g.sold ? \"True\" : \"False\"))\n        })\n\n        products._embedded.upses.map(g => {\n            data.push(createData(g._links.self.href.split(\"/\").pop(),g.price,g.type,g.sold ? \"True\" : \"False\"))\n        })\n\n        products._embedded.products.map(g => {\n            data.push(createData(g._links.self.href.split(\"/\").pop(),g.price,g.type,g.sold ? \"True\" : \"False\"))\n        })\n\n        data.sort((a,b) => {\n            return a.id - b.id\n        })\n\n        setRows(data)\n    }\n\n    const createData = (id,price,type,sold) => {\n        return {id,price,type,sold}\n    }\n\n    return (\n        <Grid container justify=\"center\" style={{}}>\n            <ProductBar />\n            <Grid item xs={12} align=\"center\" >\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}> \n                    <TableHead>\n                        <TableRow>\n                            <TableCell align=\"left\">ID</TableCell>\n                            <TableCell align=\"left\">Price</TableCell>\n                            <TableCell align=\"right\">Type</TableCell>\n                            <TableCell align=\"right\">Sold</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows != null ? rows.map(row => {\n                            return (\n                                <TableRow key= {row.id}>\n                                    <TableCell>{row.id}</TableCell>\n                                    <TableCell>{row.price}</TableCell>\n                                    <TableCell>{row.type}</TableCell>\n                                    <TableCell>{row.sold}</TableCell>\n                                </TableRow>\n                            )\n                        }) : null }\n                    </TableBody>\n                </TableContainer>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default Product;","/home/talha/IdeaProjects/EAPSCO/client/src/components/product/productBar.js",["66"],"import React from 'react';\nimport {Button, ButtonGroup, Grid} from \"@material-ui/core\";\n\nconst productBar = (props) => {\n\n    return (\n        <div>\n            <Grid item xs={12} style={{margin: \"20px 50px\"}}>\n                <ButtonGroup fullWidth color=\"primary\" variant=\"contained\" > \n                    <Button onClick={() => window.location.href = \"/products/all\"}>All</Button>\n                    <Button onClick={() => window.location.href = \"/products/generators\"}>Generators</Button>\n                    <Button onClick={() => window.location.href = \"/products/motors\"}>Motors</Button>\n                    <Button onClick={() => window.location.href = \"/products/upses\"}>Upses</Button>\n                </ButtonGroup>\n            </Grid>\n        </div>\n    )\n}\n\nexport default productBar;","/home/talha/IdeaProjects/EAPSCO/client/src/components/product/generator.js",["67","68","69","70","71"],"import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport {Grid, Paper, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\n\nimport ProductBar from \"./productBar\"\n\nconst Generator = (props) => {\n    let [rows, setRows] = useState(null)\n\n    useEffect(async () => {\n        rows = await rowValues()\n    }, [])\n\n    const rowValues = async () => {\n        let products;\n        let data = []\n\n        await axios({method : \"get\", url: \"/products\"})\n        .then(res => products = res.data)\n        .catch(err => console.log(err))\n        \n        products._embedded.generators.map(g => {\n            data.push(createData(g._links.self.href.split(\"/\").pop(),g.price,g.type,g.sold ? \"True\" : \"False\",g.dimensions, g.fuelCapacity, g.power))\n        })\n\n\n        data.sort((a,b) => {\n            return a.id - b.id\n        })\n\n        setRows(data)\n    }\n\n    const createData = (id,price,type,sold,dimensions,fuelCapacity,power) => {\n        return {id,price,type,sold,dimensions,fuelCapacity,power}\n    }\n\n    return (\n        <Grid container justify=\"center\" style={{}}>\n            <ProductBar />\n            <Grid item xs={12} align=\"center\" >\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}> \n                    <TableHead>\n                        <TableRow>\n                            <TableCell align=\"left\">ID</TableCell>\n                            <TableCell align=\"left\">Price</TableCell>\n                            <TableCell align=\"right\">Type</TableCell>\n                            <TableCell align=\"right\">Sold</TableCell>\n                            <TableCell align=\"right\">Dimensions</TableCell>\n                            <TableCell align=\"right\">Fuel Capacity</TableCell>\n                            <TableCell align=\"right\">Power</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows != null ? rows.map(row => {\n                            return (\n                                <TableRow key= {row.id}>\n                                    <TableCell>{row.id}</TableCell>\n                                    <TableCell>{row.price}</TableCell>\n                                    <TableCell>{row.type}</TableCell>\n                                    <TableCell>{row.sold}</TableCell>\n                                    <TableCell>{row.dimensions}</TableCell>\n                                    <TableCell>{row.fuelCapacity}</TableCell>\n                                    <TableCell>{row.power}</TableCell>\n                                </TableRow>\n                            )\n                        }) : null }\n                    </TableBody>\n                </TableContainer>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default Generator;","/home/talha/IdeaProjects/EAPSCO/client/src/components/product/motor.js",["72","73","74","75","76"],"import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport {Grid, Paper, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\n\nimport ProductBar from \"./productBar\"\n\nconst Motor = (props) => {\n    let [rows, setRows] = useState(null)\n\n    useEffect(async () => {\n        rows = await rowValues()\n    }, [])\n\n    const rowValues = async () => {\n        let products;\n        let data = []\n\n        await axios({method : \"get\", url: \"/products\"})\n        .then(res => products = res.data)\n        .catch(err => console.log(err))\n\n        \n        \n        products._embedded.motors.map(g => {\n            data.push(createData(g._links.self.href.split(\"/\").pop(),g.price,g.type,g.sold ? \"True\" : \"False\" , g.mtype, g.power, g.rpm))\n        })\n\n\n        data.sort((a,b) => {\n            return a.id - b.id\n        })\n\n        setRows(data)\n    }\n\n    const createData = (id,price,type,sold,mtype,power,rpm) => {\n        return {id,price,type,sold,mtype,power,rpm}\n    }\n\n    return (\n        <Grid container justify=\"center\" style={{}}>\n            <ProductBar />\n            <Grid item xs={12} align=\"center\" >\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}> \n                    <TableHead>\n                        <TableRow>\n                            <TableCell align=\"left\">ID</TableCell>\n                            <TableCell align=\"left\">Price</TableCell>\n                            <TableCell align=\"right\">Type</TableCell>\n                            <TableCell align=\"right\">Sold</TableCell>\n                            <TableCell align=\"right\">M type</TableCell>\n                            <TableCell align=\"right\">Power</TableCell>\n                            <TableCell align=\"right\">RPM</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows != null ? rows.map(row => {\n                            return (\n                                <TableRow key= {row.id}>\n                                    <TableCell>{row.id}</TableCell>\n                                    <TableCell>{row.price}</TableCell>\n                                    <TableCell>{row.type}</TableCell>\n                                    <TableCell>{row.sold}</TableCell>\n                                    <TableCell>{row.mtype}</TableCell>\n                                    <TableCell>{row.power}</TableCell>\n                                    <TableCell>{row.rpm}</TableCell>\n                                </TableRow>\n                            )\n                        }) : null }\n                    </TableBody>\n                </TableContainer>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default Motor;","/home/talha/IdeaProjects/EAPSCO/client/src/components/product/ups.js",["77","78","79","80","81"],"import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport {Grid, Paper, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\n\nimport ProductBar from \"./productBar\"\n\nconst UPS = (props) => {\n    let [rows, setRows] = useState(null)\n\n    useEffect(async () => {\n        rows = await rowValues()\n    }, [])\n\n    const rowValues = async () => {\n        let products;\n        let data = []\n\n        await axios({method : \"get\", url: \"/products\"})\n        .then(res => products = res.data)\n        .catch(err => console.log(err))\n\n        console.log(products)\n\n        products._embedded.upses.map(g => {\n            data.push(createData(g._links.self.href.split(\"/\").pop(),g.price,g.type,g.sold ? \"True\" : \"False\", g.capacity,g.dimensions,g.voltage))\n        })\n\n\n        data.sort((a,b) => {\n            return a.id - b.id\n        })\n\n        setRows(data)\n    }\n\n    const createData = (id,price,type,sold,capacity,dimensions,voltage) => {\n        return {id,price,type,sold,capacity,dimensions,voltage}\n    }\n\n    return (\n        <Grid container justify=\"center\" style={{}}>\n            <ProductBar />\n            <Grid item xs={12} align=\"center\" >\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}> \n                    <TableHead>\n                        <TableRow>\n                            <TableCell align=\"left\">ID</TableCell>\n                            <TableCell align=\"left\">Price</TableCell>\n                            <TableCell align=\"right\">Type</TableCell>\n                            <TableCell align=\"right\">Sold</TableCell>\n                            <TableCell align=\"right\">Capacity</TableCell>\n                            <TableCell align=\"right\">Dimensions</TableCell>\n                            <TableCell align=\"right\">Voltage</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows != null ? rows.map(row => {\n                            return (\n                                <TableRow key= {row.id}>\n                                    <TableCell>{row.id}</TableCell>\n                                    <TableCell>{row.price}</TableCell>\n                                    <TableCell>{row.type}</TableCell>\n                                    <TableCell>{row.sold}</TableCell>\n                                    <TableCell>{row.capacity}</TableCell>\n                                    <TableCell>{row.dimensions}</TableCell>\n                                    <TableCell>{row.voltage}</TableCell>\n                                </TableRow>\n                            )\n                        }) : null }\n                    </TableBody>\n                </TableContainer>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default UPS;",{"ruleId":"82","severity":1,"message":"83","line":14,"column":22,"nodeType":"84","messageId":"85","endLine":14,"endColumn":35},{"ruleId":"86","severity":1,"message":"87","line":32,"column":11,"nodeType":"88","messageId":"89","endLine":42,"endColumn":12},{"ruleId":"90","severity":1,"message":"91","line":65,"column":6,"nodeType":"92","endLine":65,"endColumn":8,"suggestions":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"82","severity":1,"message":"98","line":3,"column":16,"nodeType":"84","messageId":"85","endLine":3,"endColumn":22},{"ruleId":"82","severity":1,"message":"99","line":3,"column":24,"nodeType":"84","messageId":"85","endLine":3,"endColumn":35},{"ruleId":"90","severity":1,"message":"100","line":10,"column":15,"nodeType":"101","endLine":12,"endColumn":6},{"ruleId":"90","severity":1,"message":"102","line":11,"column":16,"nodeType":"103","endLine":11,"endColumn":33},{"ruleId":"104","severity":1,"message":"105","line":23,"column":45,"nodeType":"101","messageId":"106","endLine":23,"endColumn":47},{"ruleId":"104","severity":1,"message":"105","line":27,"column":41,"nodeType":"101","messageId":"106","endLine":27,"endColumn":43},{"ruleId":"104","severity":1,"message":"105","line":31,"column":40,"nodeType":"101","messageId":"106","endLine":31,"endColumn":42},{"ruleId":"104","severity":1,"message":"105","line":35,"column":43,"nodeType":"101","messageId":"106","endLine":35,"endColumn":45},{"ruleId":"82","severity":1,"message":"107","line":2,"column":8,"nodeType":"84","messageId":"85","endLine":2,"endColumn":13},{"ruleId":"82","severity":1,"message":"98","line":3,"column":16,"nodeType":"84","messageId":"85","endLine":3,"endColumn":22},{"ruleId":"82","severity":1,"message":"99","line":3,"column":24,"nodeType":"84","messageId":"85","endLine":3,"endColumn":35},{"ruleId":"90","severity":1,"message":"100","line":10,"column":15,"nodeType":"101","endLine":12,"endColumn":6},{"ruleId":"90","severity":1,"message":"102","line":11,"column":16,"nodeType":"103","endLine":11,"endColumn":33},{"ruleId":"104","severity":1,"message":"105","line":22,"column":45,"nodeType":"101","messageId":"106","endLine":22,"endColumn":47},{"ruleId":"82","severity":1,"message":"98","line":3,"column":16,"nodeType":"84","messageId":"85","endLine":3,"endColumn":22},{"ruleId":"82","severity":1,"message":"99","line":3,"column":24,"nodeType":"84","messageId":"85","endLine":3,"endColumn":35},{"ruleId":"90","severity":1,"message":"100","line":10,"column":15,"nodeType":"101","endLine":12,"endColumn":6},{"ruleId":"90","severity":1,"message":"102","line":11,"column":16,"nodeType":"103","endLine":11,"endColumn":33},{"ruleId":"104","severity":1,"message":"105","line":24,"column":41,"nodeType":"101","messageId":"106","endLine":24,"endColumn":43},{"ruleId":"82","severity":1,"message":"98","line":3,"column":16,"nodeType":"84","messageId":"85","endLine":3,"endColumn":22},{"ruleId":"82","severity":1,"message":"99","line":3,"column":24,"nodeType":"84","messageId":"85","endLine":3,"endColumn":35},{"ruleId":"90","severity":1,"message":"100","line":10,"column":15,"nodeType":"101","endLine":12,"endColumn":6},{"ruleId":"90","severity":1,"message":"102","line":11,"column":16,"nodeType":"103","endLine":11,"endColumn":33},{"ruleId":"104","severity":1,"message":"105","line":24,"column":40,"nodeType":"101","messageId":"106","endLine":24,"endColumn":42},"no-unused-vars","'setHasAccount' is assigned a value but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'authListener'. Either include it or remove the dependency array.","ArrayExpression",["108"],"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"'Button' is defined but never used.","'ButtonGroup' is defined but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","Assignments to the 'rows' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","AwaitExpression","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","'axios' is defined but never used.",{"desc":"111","fix":"112"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [authListener]",{"range":"113","text":"114"},[1449,1451],"[authListener]"]
[{"/home/talha/IdeaProjects/EAPSCO/client/src/index.js":"1","/home/talha/IdeaProjects/EAPSCO/client/src/App.js":"2","/home/talha/IdeaProjects/EAPSCO/client/src/reportWebVitals.js":"3","/home/talha/IdeaProjects/EAPSCO/client/src/Login.js":"4","/home/talha/IdeaProjects/EAPSCO/client/src/Action.js":"5","/home/talha/IdeaProjects/EAPSCO/client/src/fire.js":"6","/home/talha/IdeaProjects/EAPSCO/client/src/components/product/product.js":"7","/home/talha/IdeaProjects/EAPSCO/client/src/components/product/productBar.js":"8","/home/talha/IdeaProjects/EAPSCO/client/src/components/product/generator.js":"9","/home/talha/IdeaProjects/EAPSCO/client/src/components/product/motor.js":"10","/home/talha/IdeaProjects/EAPSCO/client/src/components/product/ups.js":"11","/home/talha/IdeaProjects/EAPSCO/client/src/components/customer/customer.js":"12","/home/talha/IdeaProjects/EAPSCO/client/src/components/customer/customerBar.js":"13","/home/talha/IdeaProjects/EAPSCO/client/src/components/customer/individualCustomer.js":"14","/home/talha/IdeaProjects/EAPSCO/client/src/components/customer/enterprise.js":"15","/home/talha/IdeaProjects/EAPSCO/client/src/components/employee/employee.js":"16","/home/talha/IdeaProjects/EAPSCO/client/src/components/office/offices.js":"17","/home/talha/IdeaProjects/EAPSCO/client/src/components/service/service.js":"18","/home/talha/IdeaProjects/EAPSCO/client/src/components/supplier/supplier.js":"19","/home/talha/IdeaProjects/EAPSCO/client/src/components/materials/materials.js":"20"},{"size":509,"mtime":1610358005903,"results":"21","hashOfConfig":"22"},{"size":1959,"mtime":1610358005883,"results":"23","hashOfConfig":"22"},{"size":402,"mtime":1610358005803,"results":"24","hashOfConfig":"22"},{"size":1291,"mtime":1610358005771,"results":"25","hashOfConfig":"22"},{"size":3791,"mtime":1610372476072,"results":"26","hashOfConfig":"22"},{"size":418,"mtime":1610358005755,"results":"27","hashOfConfig":"22"},{"size":2826,"mtime":1610358005739,"results":"28","hashOfConfig":"22"},{"size":796,"mtime":1610358005815,"results":"29","hashOfConfig":"22"},{"size":2869,"mtime":1610358005891,"results":"30","hashOfConfig":"22"},{"size":2788,"mtime":1610358005915,"results":"31","hashOfConfig":"22"},{"size":2872,"mtime":1610358005851,"results":"32","hashOfConfig":"22"},{"size":2552,"mtime":1610372476112,"results":"33","hashOfConfig":"22"},{"size":761,"mtime":1610372476116,"results":"34","hashOfConfig":"22"},{"size":2708,"mtime":1610372476132,"results":"35","hashOfConfig":"22"},{"size":2591,"mtime":1610372476108,"results":"36","hashOfConfig":"22"},{"size":3080,"mtime":1610372476052,"results":"37","hashOfConfig":"22"},{"size":2059,"mtime":1610372476088,"results":"38","hashOfConfig":"22"},{"size":2398,"mtime":1610372476084,"results":"39","hashOfConfig":"22"},{"size":2389,"mtime":1610372476100,"results":"40","hashOfConfig":"22"},{"size":2199,"mtime":1610372476124,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"18yva1h",{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"44"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"44"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"44"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"44"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"44"},"/home/talha/IdeaProjects/EAPSCO/client/src/index.js",[],["97","98"],"/home/talha/IdeaProjects/EAPSCO/client/src/App.js",["99","100","101"],"import React, { useState, useEffect } from \"react\";\nimport fire from \"./fire\";\nimport './App.css';\nimport Login from \"./Login\";\nimport Action from \"./Action\";\n\n\nfunction App() {\n  const [user, setUser] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [emailError, setEmailError] = useState('');\n  const [passwordError, setPasswordError] = useState('');\n  const [hasAccount, setHasAccount] = useState(true);\n\n  const clearInputs = () => {\n    setEmail('');\n    setPassword('');\n  }\n\n  const clearErrors = () => {\n    setEmailError('');\n    setPasswordError('');\n  }\n\n  const handleLogin = () => {\n    clearErrors();\n      fire\n        .auth()\n        .signInWithEmailAndPassword(email, password)\n        .catch((err) => {\n          switch(err.code){\n            case \"auth/invalid-email\":\n            case \"auth/user-disabled\":\n            case \"auth/user-not-found\":\n              setEmailError(err.message);\n              break;\n            case \"auth/wrong-password\":\n              setPasswordError(err.message);\n              break;\n\n          }\n        })\n        \n  }\n\n  const handleLogout = () => {\n    fire.auth().signOut();\n  }\n\n  const authListener = () => {\n    fire.auth().onAuthStateChanged((user) => {\n      if (user) {\n        clearInputs();\n        setUser(user);\n      }\n      else {\n        setUser(\"\");\n      }\n    })\n}\n\n  useEffect(() => {\n    authListener();\n  }, [])\n\n  return (\n    <div className=\"App\">\n      {user ? (\n        <Action handleLogout={handleLogout}/>\n      ) : (\n        <Login \n      email={email}\n      setEmail={setEmail}\n      password={password}\n      setPassword={setPassword}\n      handleLogin={handleLogin}\n      emailError={emailError}\n      passwordError={passwordError}\n      hasAccount={hasAccount}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","/home/talha/IdeaProjects/EAPSCO/client/src/reportWebVitals.js",[],"/home/talha/IdeaProjects/EAPSCO/client/src/Login.js",[],"/home/talha/IdeaProjects/EAPSCO/client/src/Action.js",[],"/home/talha/IdeaProjects/EAPSCO/client/src/fire.js",[],"/home/talha/IdeaProjects/EAPSCO/client/src/components/product/product.js",["102","103","104","105","106","107","108","109"],"import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport {Grid, Paper, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\n\nimport ProductBar from \"./productBar\"\n\nconst Product = (props) => {\n    let [rows, setRows] = useState(null)\n\n    useEffect(async () => {\n        rows = await rowValues()\n    }, [])\n\n    const rowValues = async () => {\n        let products;\n        let data = []\n\n        await axios({method : \"get\", url: \"/products\"})\n        .then(res => products = res.data)\n        .catch(err => console.log(err))\n\n        \n        products._embedded.generators.map(g => {\n            data.push(createData(g._links.self.href.split(\"/\").pop(),g.price,g.type,g.sold ? \"True\" : \"False\"))\n        })\n\n        products._embedded.motors.map(g => {\n            data.push(createData(g._links.self.href.split(\"/\").pop(),g.price,g.type,g.sold ? \"True\" : \"False\"))\n        })\n\n        products._embedded.upses.map(g => {\n            data.push(createData(g._links.self.href.split(\"/\").pop(),g.price,g.type,g.sold ? \"True\" : \"False\"))\n        })\n\n        products._embedded.products.map(g => {\n            data.push(createData(g._links.self.href.split(\"/\").pop(),g.price,g.type,g.sold ? \"True\" : \"False\"))\n        })\n\n        data.sort((a,b) => {\n            return a.id - b.id\n        })\n\n        setRows(data)\n    }\n\n    const createData = (id,price,type,sold) => {\n        return {id,price,type,sold}\n    }\n\n    return (\n        <Grid container justify=\"center\" style={{}}>\n            <ProductBar />\n            <Grid item xs={12} align=\"center\" >\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}> \n                    <TableHead>\n                        <TableRow>\n                            <TableCell align=\"left\">ID</TableCell>\n                            <TableCell align=\"left\">Price</TableCell>\n                            <TableCell align=\"right\">Type</TableCell>\n                            <TableCell align=\"right\">Sold</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows != null ? rows.map(row => {\n                            return (\n                                <TableRow key= {row.id}>\n                                    <TableCell>{row.id}</TableCell>\n                                    <TableCell>{row.price}</TableCell>\n                                    <TableCell>{row.type}</TableCell>\n                                    <TableCell>{row.sold}</TableCell>\n                                </TableRow>\n                            )\n                        }) : null }\n                    </TableBody>\n                </TableContainer>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default Product;","/home/talha/IdeaProjects/EAPSCO/client/src/components/product/productBar.js",["110"],"import React from 'react';\nimport {Button, ButtonGroup, Grid} from \"@material-ui/core\";\n\nconst productBar = (props) => {\n\n    return (\n        <div>\n            <Grid item xs={12} style={{margin: \"20px 50px\"}}>\n                <ButtonGroup fullWidth color=\"primary\" variant=\"contained\" > \n                    <Button onClick={() => window.location.href = \"/products/all\"}>All</Button>\n                    <Button onClick={() => window.location.href = \"/products/generators\"}>Generators</Button>\n                    <Button onClick={() => window.location.href = \"/products/motors\"}>Motors</Button>\n                    <Button onClick={() => window.location.href = \"/products/upses\"}>Upses</Button>\n                </ButtonGroup>\n            </Grid>\n        </div>\n    )\n}\n\nexport default productBar;","/home/talha/IdeaProjects/EAPSCO/client/src/components/product/generator.js",["111","112","113","114","115"],"import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport {Grid, Paper, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\n\nimport ProductBar from \"./productBar\"\n\nconst Generator = (props) => {\n    let [rows, setRows] = useState(null)\n\n    useEffect(async () => {\n        rows = await rowValues()\n    }, [])\n\n    const rowValues = async () => {\n        let products;\n        let data = []\n\n        await axios({method : \"get\", url: \"/products\"})\n        .then(res => products = res.data)\n        .catch(err => console.log(err))\n        \n        products._embedded.generators.map(g => {\n            data.push(createData(g._links.self.href.split(\"/\").pop(),g.price,g.type,g.sold ? \"True\" : \"False\",g.dimensions, g.fuelCapacity, g.power))\n        })\n\n\n        data.sort((a,b) => {\n            return a.id - b.id\n        })\n\n        setRows(data)\n    }\n\n    const createData = (id,price,type,sold,dimensions,fuelCapacity,power) => {\n        return {id,price,type,sold,dimensions,fuelCapacity,power}\n    }\n\n    return (\n        <Grid container justify=\"center\" style={{}}>\n            <ProductBar />\n            <Grid item xs={12} align=\"center\" >\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}> \n                    <TableHead>\n                        <TableRow>\n                            <TableCell align=\"left\">ID</TableCell>\n                            <TableCell align=\"left\">Price</TableCell>\n                            <TableCell align=\"right\">Type</TableCell>\n                            <TableCell align=\"right\">Sold</TableCell>\n                            <TableCell align=\"right\">Dimensions</TableCell>\n                            <TableCell align=\"right\">Fuel Capacity</TableCell>\n                            <TableCell align=\"right\">Power</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows != null ? rows.map(row => {\n                            return (\n                                <TableRow key= {row.id}>\n                                    <TableCell>{row.id}</TableCell>\n                                    <TableCell>{row.price}</TableCell>\n                                    <TableCell>{row.type}</TableCell>\n                                    <TableCell>{row.sold}</TableCell>\n                                    <TableCell>{row.dimensions}</TableCell>\n                                    <TableCell>{row.fuelCapacity}</TableCell>\n                                    <TableCell>{row.power}</TableCell>\n                                </TableRow>\n                            )\n                        }) : null }\n                    </TableBody>\n                </TableContainer>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default Generator;","/home/talha/IdeaProjects/EAPSCO/client/src/components/product/motor.js",["116","117","118","119","120"],"import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport {Grid, Paper, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\n\nimport ProductBar from \"./productBar\"\n\nconst Motor = (props) => {\n    let [rows, setRows] = useState(null)\n\n    useEffect(async () => {\n        rows = await rowValues()\n    }, [])\n\n    const rowValues = async () => {\n        let products;\n        let data = []\n\n        await axios({method : \"get\", url: \"/products\"})\n        .then(res => products = res.data)\n        .catch(err => console.log(err))\n\n        \n        \n        products._embedded.motors.map(g => {\n            data.push(createData(g._links.self.href.split(\"/\").pop(),g.price,g.type,g.sold ? \"True\" : \"False\" , g.mtype, g.power, g.rpm))\n        })\n\n\n        data.sort((a,b) => {\n            return a.id - b.id\n        })\n\n        setRows(data)\n    }\n\n    const createData = (id,price,type,sold,mtype,power,rpm) => {\n        return {id,price,type,sold,mtype,power,rpm}\n    }\n\n    return (\n        <Grid container justify=\"center\" style={{}}>\n            <ProductBar />\n            <Grid item xs={12} align=\"center\" >\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}> \n                    <TableHead>\n                        <TableRow>\n                            <TableCell align=\"left\">ID</TableCell>\n                            <TableCell align=\"left\">Price</TableCell>\n                            <TableCell align=\"right\">Type</TableCell>\n                            <TableCell align=\"right\">Sold</TableCell>\n                            <TableCell align=\"right\">M type</TableCell>\n                            <TableCell align=\"right\">Power</TableCell>\n                            <TableCell align=\"right\">RPM</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows != null ? rows.map(row => {\n                            return (\n                                <TableRow key= {row.id}>\n                                    <TableCell>{row.id}</TableCell>\n                                    <TableCell>{row.price}</TableCell>\n                                    <TableCell>{row.type}</TableCell>\n                                    <TableCell>{row.sold}</TableCell>\n                                    <TableCell>{row.mtype}</TableCell>\n                                    <TableCell>{row.power}</TableCell>\n                                    <TableCell>{row.rpm}</TableCell>\n                                </TableRow>\n                            )\n                        }) : null }\n                    </TableBody>\n                </TableContainer>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default Motor;","/home/talha/IdeaProjects/EAPSCO/client/src/components/product/ups.js",["121","122","123","124","125"],"import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport {Grid, Paper, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\n\nimport ProductBar from \"./productBar\"\n\nconst UPS = (props) => {\n    let [rows, setRows] = useState(null)\n\n    useEffect(async () => {\n        rows = await rowValues()\n    }, [])\n\n    const rowValues = async () => {\n        let products;\n        let data = []\n\n        await axios({method : \"get\", url: \"/products\"})\n        .then(res => products = res.data)\n        .catch(err => console.log(err))\n\n        console.log(products)\n\n        products._embedded.upses.map(g => {\n            data.push(createData(g._links.self.href.split(\"/\").pop(),g.price,g.type,g.sold ? \"True\" : \"False\", g.capacity,g.dimensions,g.voltage))\n        })\n\n\n        data.sort((a,b) => {\n            return a.id - b.id\n        })\n\n        setRows(data)\n    }\n\n    const createData = (id,price,type,sold,capacity,dimensions,voltage) => {\n        return {id,price,type,sold,capacity,dimensions,voltage}\n    }\n\n    return (\n        <Grid container justify=\"center\" style={{}}>\n            <ProductBar />\n            <Grid item xs={12} align=\"center\" >\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}> \n                    <TableHead>\n                        <TableRow>\n                            <TableCell align=\"left\">ID</TableCell>\n                            <TableCell align=\"left\">Price</TableCell>\n                            <TableCell align=\"right\">Type</TableCell>\n                            <TableCell align=\"right\">Sold</TableCell>\n                            <TableCell align=\"right\">Capacity</TableCell>\n                            <TableCell align=\"right\">Dimensions</TableCell>\n                            <TableCell align=\"right\">Voltage</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows != null ? rows.map(row => {\n                            return (\n                                <TableRow key= {row.id}>\n                                    <TableCell>{row.id}</TableCell>\n                                    <TableCell>{row.price}</TableCell>\n                                    <TableCell>{row.type}</TableCell>\n                                    <TableCell>{row.sold}</TableCell>\n                                    <TableCell>{row.capacity}</TableCell>\n                                    <TableCell>{row.dimensions}</TableCell>\n                                    <TableCell>{row.voltage}</TableCell>\n                                </TableRow>\n                            )\n                        }) : null }\n                    </TableBody>\n                </TableContainer>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default UPS;","/home/talha/IdeaProjects/EAPSCO/client/src/components/customer/customer.js",["126","127","128","129"],"import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport {Grid, Paper, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\n\nimport CustomerBar from \"./customerBar\"\n\nconst Customer = (props) => {\n    let [rows, setRows] = useState(null)\n\n    useEffect(async () => {\n        rows = await rowValues()\n    }, [])\n\n    const rowValues = async () => {\n        let customers;\n        let data = []\n\n        await axios({method: \"get\", url: \"/customers\"})\n            .then(res => customers = res.data)\n            .catch(err => console.log(err))\n\n        console.log(customers)\n\n        customers._embedded.individualCustomers.map(g => {\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.address, g.phoneNumber, g.type))\n        })\n\n        customers._embedded.enterprises.map(g => {\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.address, g.phoneNumber, g.type))\n        })\n\n        data.sort((a, b) => {\n            return a.id - b.id\n        })\n\n        setRows(data)\n    }\n\n    const createData = (id, address, phoneNumber, type) => {\n        return {id, address, phoneNumber, type}\n    }\n\n    return (\n        <Grid container justify=\"center\" style={{}}>\n            <CustomerBar/>\n            <Grid item xs={12} align=\"center\">\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell align=\"left\">ID</TableCell>\n                            <TableCell align=\"left\">Address</TableCell>\n                            <TableCell align=\"right\">PhoneNumber</TableCell>\n                            <TableCell align=\"right\">Type</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows != null ? rows.map(row => {\n                            return (\n                                <TableRow key={row.id}>\n                                    <TableCell>{row.id}</TableCell>\n                                    <TableCell>{row.address}</TableCell>\n                                    <TableCell>{row.phoneNumber}</TableCell>\n                                    <TableCell>{row.type}</TableCell>\n                                </TableRow>\n                            )\n                        }) : null}\n                    </TableBody>\n                </TableContainer>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default Customer;","/home/talha/IdeaProjects/EAPSCO/client/src/components/customer/customerBar.js",[],"/home/talha/IdeaProjects/EAPSCO/client/src/components/customer/individualCustomer.js",["130","131","132"],"import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport {Grid, Paper, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\n\nimport CustomerBar from \"./customerBar\"\n\nconst IndividualCustomer = (props) => {\n    let [rows, setRows] = useState(null)\n\n    useEffect(async () => {\n        rows = await rowValues()\n    }, [])\n\n    const rowValues = async () => {\n        let customers;\n        let data = []\n\n        await axios({method: \"get\", url: \"/customers\"})\n            .then(res => customers = res.data)\n            .catch(err => console.log(err))\n\n        customers._embedded.individualCustomers.map(g => {\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.address, g.phoneNumber, g.type, g.name, g.surname))\n        })\n\n        data.sort((a, b) => {\n            return a.id - b.id\n        })\n\n        setRows(data)\n    }\n\n    const createData = (id, address, phoneNumber, type, name, surname) => {\n        return {id, address, phoneNumber, type, name, surname,}\n    }\n\n    return (\n        <Grid container justify=\"center\" style={{}}>\n            <CustomerBar/>\n            <Grid item xs={12} align=\"center\">\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell align=\"left\">ID</TableCell>\n                            <TableCell align=\"left\">Address</TableCell>\n                            <TableCell align=\"right\">PhoneNumber</TableCell>\n                            <TableCell align=\"right\">Type</TableCell>\n                            <TableCell align=\"right\">Name</TableCell>\n                            <TableCell align=\"right\">Surname</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows != null ? rows.map(row => {\n                            return (\n                                <TableRow key={row.id}>\n                                    <TableCell>{row.id}</TableCell>\n                                    <TableCell>{row.address}</TableCell>\n                                    <TableCell>{row.phoneNumber}</TableCell>\n                                    <TableCell>{row.type}</TableCell>\n                                    <TableCell>{row.name}</TableCell>\n                                    <TableCell>{row.surname}</TableCell>\n                                </TableRow>\n                            )\n                        }) : null}\n                    </TableBody>\n                </TableContainer>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default IndividualCustomer;","/home/talha/IdeaProjects/EAPSCO/client/src/components/customer/enterprise.js",["133","134","135"],"import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport {Grid, Paper, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\n\nimport CustomerBar from \"./customerBar\"\n\nconst Enterprise = (props) => {\n    let [rows, setRows] = useState(null)\n\n    useEffect(async () => {\n        rows = await rowValues()\n    }, [])\n\n    const rowValues = async () => {\n        let customers;\n        let data = []\n\n        await axios({method: \"get\", url: \"/customers\"})\n            .then(res => customers = res.data)\n            .catch(err => console.log(err))\n\n        console.log(customers)\n\n        customers._embedded.enterprises.map(g => {\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.address, g.phoneNumber, g.enterpriseName, g.type))\n        })\n\n        data.sort((a, b) => {\n            return a.id - b.id\n        })\n\n        setRows(data)\n    }\n\n    const createData = (id, address, phoneNumber, enterpriseName, type) => {\n        return {id, address, phoneNumber, enterpriseName, type}\n    }\n\n    return (\n        <Grid container justify=\"center\" style={{}}>\n            <CustomerBar/>\n            <Grid item xs={12} align=\"center\">\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell align=\"left\">ID</TableCell>\n                            <TableCell align=\"left\">Address</TableCell>\n                            <TableCell align=\"right\">PhoneNumber</TableCell>\n                            <TableCell align=\"right\">Type</TableCell>\n                            <TableCell align=\"right\">Enterprise Name</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows != null ? rows.map(row => {\n                            return (\n                                <TableRow key={row.id}>\n                                    <TableCell>{row.id}</TableCell>\n                                    <TableCell>{row.address}</TableCell>\n                                    <TableCell>{row.phoneNumber}</TableCell>\n                                    <TableCell>{row.type}</TableCell>\n                                    <TableCell>{row.enterpriseName}</TableCell>\n                                </TableRow>\n                            )\n                        }) : null}\n                    </TableBody>\n                </TableContainer>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default Enterprise;","/home/talha/IdeaProjects/EAPSCO/client/src/components/employee/employee.js",["136","137","138"],"import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport {Grid, Paper, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\n\n\nconst Employee = (props) => {\n    let [rows, setRows] = useState(null)\n\n    useEffect(async () => {\n        rows = await rowValues()\n    }, [])\n\n    const rowValues = async () => {\n        let employees;\n        let data = []\n\n        await axios({method: \"get\", url: \"/employees\"})\n            .then(res => employees = res.data)\n            .catch(err => console.log(err))\n\n        console.log(employees)\n\n        employees._embedded.employees.map(g => {\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.name, g.surname, g.mail, g.phoneNumber, g.address, g.age, g.birthdate, g.salary))\n        })\n\n        setRows(data)\n    }\n\n    const createData = (id, name, surname, mail, phoneNumber, address, age, birthdate, salary) => {\n        return {id, name, surname, mail, phoneNumber, address, age, birthdate, salary}\n    }\n\n    return (\n        <Grid container justify=\"center\" style={{}}>\n            <Grid item xs={12} align=\"center\">\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell align=\"left\">ID</TableCell>\n                            <TableCell align=\"left\">Name</TableCell>\n                            <TableCell align=\"right\">Surname</TableCell>\n                            <TableCell align=\"right\">Mail</TableCell>\n                            <TableCell align=\"right\">Phone Number</TableCell>\n                            <TableCell align=\"right\">Address</TableCell>\n                            <TableCell align=\"right\">Age</TableCell>\n                            <TableCell align=\"right\">Birthdate</TableCell>\n                            <TableCell align=\"right\">Salary</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows != null ? rows.map(row => {\n                            return (\n                                <TableRow key={row.id}>\n                                    <TableCell>{row.id}</TableCell>\n                                    <TableCell>{row.name}</TableCell>\n                                    <TableCell>{row.surname}</TableCell>\n                                    <TableCell>{row.mail}</TableCell>\n                                    <TableCell>{row.phoneNumber}</TableCell>\n                                    <TableCell>{row.address}</TableCell>\n                                    <TableCell>{row.age}</TableCell>\n                                    <TableCell>{row.birthdate}</TableCell>\n                                    <TableCell>{row.salary}</TableCell>\n                                </TableRow>\n                            )\n                        }) : null}\n                    </TableBody>\n                </TableContainer>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default Employee;","/home/talha/IdeaProjects/EAPSCO/client/src/components/office/offices.js",["139","140","141"],"import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport {Grid, Paper, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\n\n\nconst Office = (props) => {\n    let [rows, setRows] = useState(null)\n\n    useEffect(async () => {\n        rows = await rowValues()\n    }, [])\n\n    const rowValues = async () => {\n        let offices;\n        let data = []\n\n        await axios({method: \"get\", url: \"/offices\"})\n            .then(res => offices = res.data)\n            .catch(err => console.log(err))\n\n        console.log(offices)\n\n        offices._embedded.offices.map(g => {\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.address, g.phoneNumber))\n        })\n\n        setRows(data)\n    }\n\n    const createData = (id, address, phoneNumber) => {\n        return {id, address, phoneNumber}\n    }\n\n    return (\n        <Grid container justify=\"center\" style={{}}>\n            <Grid item xs={12} align=\"center\">\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell align=\"left\">ID</TableCell>\n                            <TableCell align=\"left\">Address</TableCell>\n                            <TableCell align=\"right\">Phone Number</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows != null ? rows.map(row => {\n                            return (\n                                <TableRow key={row.id}>\n                                    <TableCell>{row.id}</TableCell>\n                                    <TableCell>{row.address}</TableCell>\n                                    <TableCell>{row.phoneNumber}</TableCell>\n                                </TableRow>\n                            )\n                        }) : null}\n                    </TableBody>\n                </TableContainer>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default Office;","/home/talha/IdeaProjects/EAPSCO/client/src/components/service/service.js",["142","143","144"],"import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport {Grid, Paper, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\n\n\nconst Service = (props) => {\n    let [rows, setRows] = useState(null)\n\n    useEffect(async () => {\n        rows = await rowValues()\n    }, [])\n\n    const rowValues = async () => {\n        let services;\n        let data = []\n\n        await axios({method: \"get\", url: \"/services\"})\n            .then(res => services = res.data)\n            .catch(err => console.log(err))\n\n        console.log(services)\n\n        services._embedded.services.map(g => {\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.startDate, g.endDate, g.duration, g.cost))\n        })\n\n        setRows(data)\n    }\n\n    const createData = (id, startDate, endDate, duration, cost) => {\n        return {id, startDate, endDate, duration, cost}\n    }\n\n    return (\n        <Grid container justify=\"center\" style={{}}>\n            <Grid item xs={12} align=\"center\">\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell align=\"left\">ID</TableCell>\n                            <TableCell align=\"left\">Start Date</TableCell>\n                            <TableCell align=\"right\">End Date</TableCell>\n                            <TableCell align=\"right\">Duration</TableCell>\n                            <TableCell align=\"right\">Cost</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows != null ? rows.map(row => {\n                            return (\n                                <TableRow key={row.id}>\n                                    <TableCell>{row.id}</TableCell>\n                                    <TableCell>{row.startDate}</TableCell>\n                                    <TableCell>{row.endDate}</TableCell>\n                                    <TableCell>{row.duration}</TableCell>\n                                    <TableCell>{row.cost}</TableCell>\n                                </TableRow>\n                            )\n                        }) : null}\n                    </TableBody>\n                </TableContainer>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default Service;","/home/talha/IdeaProjects/EAPSCO/client/src/components/supplier/supplier.js",["145","146","147"],"import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport {Grid, Paper, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\n\n\nconst Office = (props) => {\n    let [rows, setRows] = useState(null)\n\n    useEffect(async () => {\n        rows = await rowValues()\n    }, [])\n\n    const rowValues = async () => {\n        let suppliers;\n        let data = []\n\n        await axios({method: \"get\", url: \"/suppliers\"})\n            .then(res => suppliers = res.data)\n            .catch(err => console.log(err))\n\n        console.log(suppliers)\n\n        suppliers._embedded.suppliers.map(g => {\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.name, g.address, g.mail, g.phoneNumber))\n        })\n\n        setRows(data)\n    }\n\n    const createData = (id, name, address, mail, phoneNumber) => {\n        return {id, name, address, mail, phoneNumber}\n    }\n\n    return (\n        <Grid container justify=\"center\" style={{}}>\n            <Grid item xs={12} align=\"center\">\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell align=\"left\">ID</TableCell>\n                            <TableCell align=\"left\">Name</TableCell>\n                            <TableCell align=\"left\">Address</TableCell>\n                            <TableCell align=\"left\">Mail</TableCell>\n                            <TableCell align=\"right\">Phone Number</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows != null ? rows.map(row => {\n                            return (\n                                <TableRow key={row.id}>\n                                    <TableCell>{row.id}</TableCell>\n                                    <TableCell>{row.name}</TableCell>\n                                    <TableCell>{row.address}</TableCell>\n                                    <TableCell>{row.mail}</TableCell>\n                                    <TableCell>{row.phoneNumber}</TableCell>\n                                </TableRow>\n                            )\n                        }) : null}\n                    </TableBody>\n                </TableContainer>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default Office;","/home/talha/IdeaProjects/EAPSCO/client/src/components/materials/materials.js",["148","149","150"],"import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport {Grid, Paper, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\n\n\nconst Material = (props) => {\n    let [rows, setRows] = useState(null)\n\n    useEffect(async () => {\n        rows = await rowValues()\n    }, [])\n\n    const rowValues = async () => {\n        let materials;\n        let data = []\n\n        await axios({method: \"get\", url: \"/materials\"})\n            .then(res => materials = res.data)\n            .catch(err => console.log(err))\n\n        console.log(materials)\n\n        materials._embedded.materials.map(g => {\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.type, g.amount, g.price))\n        })\n\n        setRows(data)\n    }\n\n    const createData = (id, type, amount, price) => {\n        return {id, type, amount, price}\n    }\n\n    return (\n        <Grid container justify=\"center\" style={{}}>\n            <Grid item xs={12} align=\"center\">\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell align=\"left\">ID</TableCell>\n                            <TableCell align=\"left\">Type</TableCell>\n                            <TableCell align=\"right\">Amount</TableCell>\n                            <TableCell align=\"right\">Price</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows != null ? rows.map(row => {\n                            return (\n                                <TableRow key={row.id}>\n                                    <TableCell>{row.id}</TableCell>\n                                    <TableCell>{row.type}</TableCell>\n                                    <TableCell>{row.amount}</TableCell>\n                                    <TableCell>{row.price}</TableCell>\n                                </TableRow>\n                            )\n                        }) : null}\n                    </TableBody>\n                </TableContainer>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default Material;",{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","severity":1,"message":"156","line":14,"column":22,"nodeType":"157","messageId":"158","endLine":14,"endColumn":35},{"ruleId":"159","severity":1,"message":"160","line":32,"column":11,"nodeType":"161","messageId":"162","endLine":42,"endColumn":12},{"ruleId":"163","severity":1,"message":"164","line":65,"column":6,"nodeType":"165","endLine":65,"endColumn":8,"suggestions":"166"},{"ruleId":"155","severity":1,"message":"167","line":3,"column":16,"nodeType":"157","messageId":"158","endLine":3,"endColumn":22},{"ruleId":"155","severity":1,"message":"168","line":3,"column":24,"nodeType":"157","messageId":"158","endLine":3,"endColumn":35},{"ruleId":"163","severity":1,"message":"169","line":10,"column":15,"nodeType":"170","endLine":12,"endColumn":6},{"ruleId":"163","severity":1,"message":"171","line":11,"column":16,"nodeType":"172","endLine":11,"endColumn":33},{"ruleId":"173","severity":1,"message":"174","line":23,"column":45,"nodeType":"170","messageId":"175","endLine":23,"endColumn":47},{"ruleId":"173","severity":1,"message":"174","line":27,"column":41,"nodeType":"170","messageId":"175","endLine":27,"endColumn":43},{"ruleId":"173","severity":1,"message":"174","line":31,"column":40,"nodeType":"170","messageId":"175","endLine":31,"endColumn":42},{"ruleId":"173","severity":1,"message":"174","line":35,"column":43,"nodeType":"170","messageId":"175","endLine":35,"endColumn":45},{"ruleId":"155","severity":1,"message":"176","line":2,"column":8,"nodeType":"157","messageId":"158","endLine":2,"endColumn":13},{"ruleId":"155","severity":1,"message":"167","line":3,"column":16,"nodeType":"157","messageId":"158","endLine":3,"endColumn":22},{"ruleId":"155","severity":1,"message":"168","line":3,"column":24,"nodeType":"157","messageId":"158","endLine":3,"endColumn":35},{"ruleId":"163","severity":1,"message":"169","line":10,"column":15,"nodeType":"170","endLine":12,"endColumn":6},{"ruleId":"163","severity":1,"message":"171","line":11,"column":16,"nodeType":"172","endLine":11,"endColumn":33},{"ruleId":"173","severity":1,"message":"174","line":22,"column":45,"nodeType":"170","messageId":"175","endLine":22,"endColumn":47},{"ruleId":"155","severity":1,"message":"167","line":3,"column":16,"nodeType":"157","messageId":"158","endLine":3,"endColumn":22},{"ruleId":"155","severity":1,"message":"168","line":3,"column":24,"nodeType":"157","messageId":"158","endLine":3,"endColumn":35},{"ruleId":"163","severity":1,"message":"169","line":10,"column":15,"nodeType":"170","endLine":12,"endColumn":6},{"ruleId":"163","severity":1,"message":"171","line":11,"column":16,"nodeType":"172","endLine":11,"endColumn":33},{"ruleId":"173","severity":1,"message":"174","line":24,"column":41,"nodeType":"170","messageId":"175","endLine":24,"endColumn":43},{"ruleId":"155","severity":1,"message":"167","line":3,"column":16,"nodeType":"157","messageId":"158","endLine":3,"endColumn":22},{"ruleId":"155","severity":1,"message":"168","line":3,"column":24,"nodeType":"157","messageId":"158","endLine":3,"endColumn":35},{"ruleId":"163","severity":1,"message":"169","line":10,"column":15,"nodeType":"170","endLine":12,"endColumn":6},{"ruleId":"163","severity":1,"message":"171","line":11,"column":16,"nodeType":"172","endLine":11,"endColumn":33},{"ruleId":"173","severity":1,"message":"174","line":24,"column":40,"nodeType":"170","messageId":"175","endLine":24,"endColumn":42},{"ruleId":"163","severity":1,"message":"169","line":10,"column":15,"nodeType":"170","endLine":12,"endColumn":6},{"ruleId":"163","severity":1,"message":"171","line":11,"column":16,"nodeType":"172","endLine":11,"endColumn":33},{"ruleId":"173","severity":1,"message":"174","line":24,"column":55,"nodeType":"170","messageId":"175","endLine":24,"endColumn":57},{"ruleId":"173","severity":1,"message":"174","line":28,"column":47,"nodeType":"170","messageId":"175","endLine":28,"endColumn":49},{"ruleId":"163","severity":1,"message":"169","line":10,"column":15,"nodeType":"170","endLine":12,"endColumn":6},{"ruleId":"163","severity":1,"message":"171","line":11,"column":16,"nodeType":"172","endLine":11,"endColumn":33},{"ruleId":"173","severity":1,"message":"174","line":22,"column":55,"nodeType":"170","messageId":"175","endLine":22,"endColumn":57},{"ruleId":"163","severity":1,"message":"169","line":10,"column":15,"nodeType":"170","endLine":12,"endColumn":6},{"ruleId":"163","severity":1,"message":"171","line":11,"column":16,"nodeType":"172","endLine":11,"endColumn":33},{"ruleId":"173","severity":1,"message":"174","line":24,"column":47,"nodeType":"170","messageId":"175","endLine":24,"endColumn":49},{"ruleId":"163","severity":1,"message":"169","line":9,"column":15,"nodeType":"170","endLine":11,"endColumn":6},{"ruleId":"163","severity":1,"message":"171","line":10,"column":16,"nodeType":"172","endLine":10,"endColumn":33},{"ruleId":"173","severity":1,"message":"174","line":23,"column":45,"nodeType":"170","messageId":"175","endLine":23,"endColumn":47},{"ruleId":"163","severity":1,"message":"169","line":9,"column":15,"nodeType":"170","endLine":11,"endColumn":6},{"ruleId":"163","severity":1,"message":"171","line":10,"column":16,"nodeType":"172","endLine":10,"endColumn":33},{"ruleId":"173","severity":1,"message":"174","line":23,"column":41,"nodeType":"170","messageId":"175","endLine":23,"endColumn":43},{"ruleId":"163","severity":1,"message":"169","line":9,"column":15,"nodeType":"170","endLine":11,"endColumn":6},{"ruleId":"163","severity":1,"message":"171","line":10,"column":16,"nodeType":"172","endLine":10,"endColumn":33},{"ruleId":"173","severity":1,"message":"174","line":23,"column":43,"nodeType":"170","messageId":"175","endLine":23,"endColumn":45},{"ruleId":"163","severity":1,"message":"169","line":9,"column":15,"nodeType":"170","endLine":11,"endColumn":6},{"ruleId":"163","severity":1,"message":"171","line":10,"column":16,"nodeType":"172","endLine":10,"endColumn":33},{"ruleId":"173","severity":1,"message":"174","line":23,"column":45,"nodeType":"170","messageId":"175","endLine":23,"endColumn":47},{"ruleId":"163","severity":1,"message":"169","line":9,"column":15,"nodeType":"170","endLine":11,"endColumn":6},{"ruleId":"163","severity":1,"message":"171","line":10,"column":16,"nodeType":"172","endLine":10,"endColumn":33},{"ruleId":"173","severity":1,"message":"174","line":23,"column":45,"nodeType":"170","messageId":"175","endLine":23,"endColumn":47},"no-native-reassign",["177"],"no-negated-in-lhs",["178"],"no-unused-vars","'setHasAccount' is assigned a value but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'authListener'. Either include it or remove the dependency array.","ArrayExpression",["179"],"'Button' is defined but never used.","'ButtonGroup' is defined but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","Assignments to the 'rows' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","AwaitExpression","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","'axios' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"180","fix":"181"},"Update the dependencies array to be: [authListener]",{"range":"182","text":"183"},[1449,1451],"[authListener]"]
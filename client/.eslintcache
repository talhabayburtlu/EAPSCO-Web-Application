[{"D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\index.js":"1","D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\reportWebVitals.js":"2","D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\App.js":"3","D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\fire.js":"4","D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\Login.js":"5","D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\Action.js":"6","D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\components\\product\\motor.js":"7","D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\components\\product\\generator.js":"8","D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\components\\product\\product.js":"9","D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\Header.jsx":"10","D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\components\\customer\\individualCustomer.js":"11","D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\components\\customer\\customer.js":"12","D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\components\\employee\\employee.js":"13","D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\components\\product\\ups.js":"14","D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\components\\customer\\enterprise.js":"15","D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\components\\office\\offices.js":"16","D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\components\\materials\\materials.js":"17","D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\components\\service\\service.js":"18","D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\components\\supplier\\supplier.js":"19","D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\components\\customer\\customerBar.js":"20","D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\components\\product\\productBar.js":"21"},{"size":526,"mtime":1610368859668,"results":"22","hashOfConfig":"23"},{"size":415,"mtime":1610368859670,"results":"24","hashOfConfig":"23"},{"size":2049,"mtime":1610553317497,"results":"25","hashOfConfig":"23"},{"size":418,"mtime":1610368859667,"results":"26","hashOfConfig":"23"},{"size":1291,"mtime":1610368859662,"results":"27","hashOfConfig":"23"},{"size":4294,"mtime":1610553317496,"results":"28","hashOfConfig":"23"},{"size":7207,"mtime":1610553317522,"results":"29","hashOfConfig":"23"},{"size":7615,"mtime":1610553317520,"results":"30","hashOfConfig":"23"},{"size":7281,"mtime":1610553317524,"results":"31","hashOfConfig":"23"},{"size":2402,"mtime":1610557857759,"results":"32","hashOfConfig":"23"},{"size":5871,"mtime":1610553317500,"results":"33","hashOfConfig":"23"},{"size":2625,"mtime":1610553317498,"results":"34","hashOfConfig":"23"},{"size":7932,"mtime":1610553317501,"results":"35","hashOfConfig":"23"},{"size":7565,"mtime":1610553317527,"results":"36","hashOfConfig":"23"},{"size":5414,"mtime":1610553317500,"results":"37","hashOfConfig":"23"},{"size":5181,"mtime":1610553317505,"results":"38","hashOfConfig":"23"},{"size":4700,"mtime":1610553317504,"results":"39","hashOfConfig":"23"},{"size":5688,"mtime":1610553317536,"results":"40","hashOfConfig":"23"},{"size":6099,"mtime":1610553317537,"results":"41","hashOfConfig":"23"},{"size":718,"mtime":1610553317499,"results":"42","hashOfConfig":"23"},{"size":753,"mtime":1610553317526,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"quu49s",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"46"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"46"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"46"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\index.js",[],["102","103"],"D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\reportWebVitals.js",[],"D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\App.js",["104","105","106"],"import React, {useEffect, useState} from \"react\";\r\nimport fire from \"./fire\";\r\nimport './App.css';\r\nimport Action from \"./Action\";\r\nimport Login from \"./Login\";\r\n\r\n\r\nfunction App() {\r\n  const [user, setUser] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [emailError, setEmailError] = useState('');\r\n  const [passwordError, setPasswordError] = useState('');\r\n  const [hasAccount, setHasAccount] = useState(true);\r\n\r\n  const clearInputs = () => {\r\n    setEmail('');\r\n    setPassword('');\r\n  }\r\n\r\n  const clearErrors = () => {\r\n    setEmailError('');\r\n    setPasswordError('');\r\n  }\r\n\r\n  const handleLogin = () => {\r\n    clearErrors();\r\n    fire\r\n        .auth()\r\n        .signInWithEmailAndPassword(email, password)\r\n        .catch((err) => {\r\n          switch (err.code) {\r\n            case \"auth/invalid-email\":\r\n            case \"auth/user-disabled\":\r\n            case \"auth/user-not-found\":\r\n              setEmailError(err.message);\r\n              break;\r\n            case \"auth/wrong-password\":\r\n              setPasswordError(err.message);\r\n              break;\r\n\r\n          }\r\n        })\r\n\r\n  }\r\n\r\n  const handleLogout = () => {\r\n    fire.auth().signOut();\r\n  }\r\n\r\n  const authListener = () => {\r\n    fire.auth().onAuthStateChanged((user) => {\r\n      if (user) {\r\n        clearInputs();\r\n        setUser(user);\r\n      } else {\r\n        setUser(\"\");\r\n      }\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n      authListener();\r\n  }, [])\r\n\r\n  return (\r\n      <div className=\"App\">\r\n        {user ? (\r\n            <Action handleLogout={handleLogout}/>\r\n        ) : (\r\n            <Login\r\n                email={email}\r\n                setEmail={setEmail}\r\n                password={password}\r\n                setPassword={setPassword}\r\n                handleLogin={handleLogin}\r\n                emailError={emailError}\r\n                passwordError={passwordError}\r\n                hasAccount={hasAccount}\r\n            />\r\n        )}\r\n\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\fire.js",[],"D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\Login.js",[],"D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\Action.js",["107"],"import React from 'react';\r\nimport {BrowserRouter, Route, Switch,} from \"react-router-dom\";\r\nimport {Button, ButtonGroup, Grid} from \"@material-ui/core\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Header from './Header';\r\n\r\n\r\nimport Product from './components/product/product';\r\nimport Generator from './components/product/generator';\r\nimport Motor from \"./components/product/motor\";\r\nimport UPS from \"./components/product/ups\";\r\nimport Customer from \"./components/customer/customer\";\r\nimport IndividualCustomers from \"./components/customer/individualCustomer\";\r\nimport Enterprise from \"./components/customer/enterprise\";\r\nimport Employee from \"./components/employee/employee\";\r\nimport Office from \"./components/office/offices\";\r\nimport Service from \"./components/service/service\";\r\nimport Supplier from \"./components/supplier/supplier\";\r\nimport Material from \"./components/materials/materials\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      \"& > *\": {\r\n        margin: theme.spacing(1),\r\n        width: theme.spacing(32),\r\n        height: theme.spacing(16)\r\n      }\r\n     \r\n    },\r\n    coloredPaper: {\r\n      backgroundColor: \"primary\",\r\n      border: 0,\r\n      borderRadius: 3,\r\n      boxShadow: '0 3px 5px 2px rgba(0, 0, 0, .3)',\r\n      color: 'primary',\r\n      height: 480,\r\n      width: 1000,\r\n      padding: '0 30px',\r\n      flex: 1\r\n    },\r\n\r\n    gridBox: {\r\n        minHeight: 500,\r\n        \r\n\r\n    }\r\n  }));\r\n\r\nconst Action = props => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n            <section className=\"action\">\r\n            <Grid>\r\n                <BrowserRouter>\r\n                    <Header />\r\n                </BrowserRouter>\r\n            </Grid>\r\n\r\n                <Grid container justify=\"center\" style={{marginTop: \"10px\"}}>\r\n                    <Grid item xs={12} style={{margin: \"20px 50px\"}}>\r\n                        <ButtonGroup fullWidth color=\"primary\" variant=\"contained\">\r\n                            <Button onClick={() => window.location.href = \"/products/all\"}>Products</Button>\r\n                            <Button onClick={() => window.location.href = \"/customers/all\"}>Customers</Button>\r\n                            <Button onClick={() => window.location.href = \"/services\"}>Services</Button>\r\n                            <Button onClick={() => window.location.href = \"/offices\"}>Offices</Button>\r\n                            <Button onClick={() => window.location.href = \"/employees\"}>Employees</Button>\r\n                            <Button onClick={() => window.location.href = \"/suppliers\"}>Suppliers</Button>\r\n                            <Button onClick={() => window.location.href = \"/materials\"}>Materials</Button>\r\n                        </ButtonGroup>\r\n                    </Grid>\r\n                    {/*<Grid item xs={12} align=\"center\" style={{margin: \"20px 50px\", background: \"#666\" , height:\"500px\"}}>\r\n                        <Product />\r\n                    </Grid>*/}\r\n                    <BrowserRouter>\r\n                        <Switch>\r\n                            <Route exact path=\"/products/all\" component={Product}/>\r\n                            <Route exact path=\"/products/generators\" component={Generator}/>\r\n                            <Route exact path=\"/products/motors\" component={Motor}/>\r\n                            <Route exact path=\"/products/upses\" component={UPS}/>\r\n                            <Route exact path=\"/customers/all\" component={Customer}/>\r\n                            <Route exact path=\"/customers/individualCustomers\" component={IndividualCustomers}/>\r\n                            <Route exact path=\"/customers/enterprises\" component={Enterprise}/>\r\n                            <Route exact path=\"/services\" component={Service}/>\r\n                            <Route exact path=\"/employees\" component={Employee}/>\r\n                            <Route exact path=\"/offices\" component={Office}/>\r\n                            <Route exact path=\"/suppliers\" component={Supplier}/>\r\n                            <Route exact path=\"/materials\" component={Material}/>\r\n                        </Switch>\r\n                    </BrowserRouter>\r\n\r\n                </Grid>\r\n            </section>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default Action;","D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\components\\product\\motor.js",["108","109","110"],"import React, {useEffect, useState} from 'react';\r\nimport axios from \"axios\";\r\nimport {\r\n    Button,\r\n    Grid,\r\n    Paper,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    TextField,\r\n    Typography\r\n} from \"@material-ui/core\";\r\n\r\nimport ProductBar from \"./productBar\"\r\n\r\nconst Motor = (props) => {\r\n    let [rows, setRows] = useState(null);\r\n    const [id, setId] = useState(\"\");\r\n    const [price, setPrice] = useState(\"\");\r\n    const [sold, setSold] = useState(\"\");\r\n    const [mtype, setmType] = useState(\"\");\r\n    const [power, setPower] = useState(\"\");\r\n    const [rpm, setRpm] = useState(\"\");\r\n\r\n    useEffect(async () => {\r\n        rows = await rowValues()\r\n    }, [])\r\n\r\n    const rowValues = async () => {\r\n        let products;\r\n        let data = []\r\n\r\n        try {\r\n            const res = await axios({method: \"get\", url: \"/products\"})\r\n            products = res.data\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n\r\n        await Promise.all(products._embedded.motors.map(async g => {\r\n            const customerId = await getId(\"/products/\" + g._links.self.href.split(\"/\").pop() + \"/customer\")\r\n            const officeIds = await getIds(\"/products/\" + g._links.self.href.split(\"/\").pop() + \"/offices\", \"offices\")\r\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.price, g.type, g.sold ? \"True\" : \"False\", g.mtype, g.power, g.rpm, customerId, officeIds))\r\n        }))\r\n\r\n\r\n        data.sort((a, b) => {\r\n            return a.id - b.id\r\n        })\r\n\r\n        setRows(data)\r\n    }\r\n\r\n    const getId = async (href) => {\r\n        let id;\r\n        try {\r\n            const res = await axios({method: \"GET\", url: href})\r\n            id = res.data._links.self.href.split(\"/\").pop()\r\n        } catch (e) {\r\n            id = \" \"\r\n        }\r\n\r\n        return id;\r\n    }\r\n\r\n    const getIds = async (href, partialUrl) => {\r\n        let ids = \"\"\r\n        try {\r\n            const res = await axios({method: \"GET\", url: href})\r\n            res.data._embedded[partialUrl].map((d => {\r\n                ids += d._links.self.href.split(\"/\").pop() + \" \"\r\n            }))\r\n        } catch (e) {\r\n            ids = \" \"\r\n        }\r\n\r\n        return ids;\r\n    }\r\n\r\n    const createData = (id, price, type, sold, mtype, power, rpm, customerId, officeIds) => {\r\n        return {id, price, type, sold, mtype, power, rpm, customerId, officeIds}\r\n    }\r\n\r\n    const handleCreate = async (event) => {\r\n        await axios({method: \"POST\", url: \"/motors\", data: {type: \"m\", price, sold, mtype, power, rpm}})\r\n            .then((res) => console.log(res))\r\n            .catch((err) => console.log(err))\r\n    }\r\n\r\n    const handleUpdate = async (event) => {\r\n        await axios({method: \"PUT\", url: \"/motors/\" + id, data: {price: price, sold: sold, mtype, power, rpm}})\r\n            .then((res) => console.log(res))\r\n            .catch((err) => console.log(err))\r\n    }\r\n\r\n    return (\r\n        <Grid container justify=\"center\" style={{background: \"#FFF\"}}>\r\n            <ProductBar/>\r\n            <Grid item xs={6} align=\"center\">\r\n                <Typography variant=\"h5\">Create a Motor</Typography>\r\n                {<form noValidate autoComplete=\"off\">\r\n                    <TextField label=\"Price\" value={price} onChange={(event) => setPrice(event.target.value)}/> <br/>\r\n                    <TextField label=\"Sold\" value={sold} onChange={(event) => setSold(event.target.value)}/> <br/>\r\n                    <TextField label=\"MType\" value={mtype} onChange={(event) => setmType(event.target.value)}/> <br/>\r\n                    <TextField label=\"Power\" value={power} onChange={(event) => setPower(event.target.value)}/> <br/>\r\n                    <TextField label=\"RPM\" value={rpm} onChange={(event) => setRpm(event.target.value)}/> <br/>\r\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}}\r\n                            onClick={handleCreate}>Create</Button>\r\n                </form>}\r\n\r\n            </Grid>\r\n            <Grid item xs={6} align=\"center\">\r\n                <Typography variant=\"h5\">Update a Motor</Typography>\r\n                {<form noValidate autoComplete=\"off\">\r\n                    <TextField label=\"ID\" value={id} onChange={(event) => setId(event.target.value)}/> <br/>\r\n                    <TextField label=\"Price\" value={price} onChange={(event) => setPrice(event.target.value)}/> <br/>\r\n                    <TextField label=\"Sold\" value={sold} onChange={(event) => setSold(event.target.value)}/> <br/>\r\n                    <TextField label=\"MType\" value={mtype} onChange={(event) => setmType(event.target.value)}/> <br/>\r\n                    <TextField label=\"Power\" value={power} onChange={(event) => setPower(event.target.value)}/> <br/>\r\n                    <TextField label=\"RPM\" value={rpm} onChange={(event) => setRpm(event.target.value)}/> <br/>\r\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}}\r\n                            onClick={handleUpdate}>Update</Button>\r\n                </form>}\r\n            </Grid>\r\n            <Grid item xs={12} align=\"center\">\r\n                <Typography variant=\"h5\">All Motors</Typography>\r\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"left\">ID</TableCell>\r\n                            <TableCell align=\"left\">Price</TableCell>\r\n                            <TableCell align=\"right\">Type</TableCell>\r\n                            <TableCell align=\"right\">Sold</TableCell>\r\n                            <TableCell align=\"right\">M type</TableCell>\r\n                            <TableCell align=\"right\">Power</TableCell>\r\n                            <TableCell align=\"right\">RPM</TableCell>\r\n                            <TableCell align=\"right\">Customer ID</TableCell>\r\n                            <TableCell align=\"right\">Office IDs</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {rows != null ? rows.map(row => {\r\n                            return (\r\n                                <TableRow key={row.id}>\r\n                                    <TableCell>{row.id}</TableCell>\r\n                                    <TableCell>{row.price}</TableCell>\r\n                                    <TableCell>{row.type}</TableCell>\r\n                                    <TableCell>{row.sold}</TableCell>\r\n                                    <TableCell>{row.mtype}</TableCell>\r\n                                    <TableCell>{row.power}</TableCell>\r\n                                    <TableCell>{row.rpm}</TableCell>\r\n                                    <TableCell>{row.customerId}</TableCell>\r\n                                    <TableCell>{row.officeIds}</TableCell>\r\n                                </TableRow>\r\n                            )\r\n                        }) : null}\r\n                    </TableBody>\r\n                </TableContainer>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Motor;","D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\components\\product\\generator.js",["111","112","113"],"import React, {useEffect, useState} from 'react';\r\nimport axios from \"axios\";\r\nimport {\r\n    Button,\r\n    Grid,\r\n    Paper,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    TextField,\r\n    Typography\r\n} from \"@material-ui/core\";\r\n\r\nimport ProductBar from \"./productBar\"\r\n\r\nconst Generator = (props) => {\r\n    let [rows, setRows] = useState(null)\r\n    const [id, setId] = useState(\"\");\r\n    const [price, setPrice] = useState(\"\");\r\n    const [sold, setSold] = useState(\"\");\r\n    const [dimensions, setDimensions] = useState(\"\");\r\n    const [fuelCapacity, setFuelCapacity] = useState(\"\");\r\n    const [power, setPower] = useState(\"\");\r\n\r\n    useEffect(async () => {\r\n        rows = await rowValues()\r\n    }, [])\r\n\r\n    const rowValues = async () => {\r\n        let products;\r\n        let data = []\r\n\r\n        try {\r\n            const res = await axios({method: \"get\", url: \"/products\"})\r\n            products = res.data\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n\r\n        await Promise.all(products._embedded.generators.map(async g => {\r\n            const customerId = await getId(\"/products/\" + g._links.self.href.split(\"/\").pop() + \"/customer\")\r\n            const officeIds = await getIds(\"/products/\" + g._links.self.href.split(\"/\").pop() + \"/offices\", \"offices\")\r\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.price, g.type, g.sold ? \"True\" : \"False\", g.dimensions, g.fuelCapacity, g.power, customerId, officeIds))\r\n        }))\r\n\r\n        data.sort((a, b) => {\r\n            return a.id - b.id\r\n        })\r\n\r\n        setRows(data)\r\n    }\r\n\r\n    const getId = async (href) => {\r\n        let id;\r\n        try {\r\n            const res = await axios({method: \"GET\", url: href})\r\n            id = res.data._links.self.href.split(\"/\").pop()\r\n        } catch (e) {\r\n            id = \" \"\r\n        }\r\n\r\n        return id;\r\n    }\r\n\r\n    const getIds = async (href, partialUrl) => {\r\n        let ids = \"\"\r\n        try {\r\n            const res = await axios({method: \"GET\", url: href})\r\n            res.data._embedded[partialUrl].map((d => {\r\n                ids += d._links.self.href.split(\"/\").pop() + \" \"\r\n            }))\r\n        } catch (e) {\r\n            ids = \" \"\r\n        }\r\n\r\n        return ids;\r\n    }\r\n\r\n    const createData = (id, price, type, sold, dimensions, fuelCapacity, power, customerId, officeIds) => {\r\n        return {id, price, type, sold, dimensions, fuelCapacity, power, customerId, officeIds}\r\n    }\r\n\r\n    const handleCreate = async (event) => {\r\n        await axios({\r\n            method: \"POST\",\r\n            url: \"/generators\",\r\n            data: {type: \"o\", price, sold, dimensions, fuelCapacity, power}\r\n        })\r\n            .then((res) => console.log(res))\r\n            .catch((err) => console.log(err))\r\n    }\r\n\r\n    const handleUpdate = async (event) => {\r\n        await axios({method: \"PUT\", url: \"/generators/\" + id, data: {price, sold, dimensions, fuelCapacity, power}})\r\n            .then((res) => console.log(res))\r\n            .catch((err) => console.log(err))\r\n    }\r\n\r\n\r\n    return (\r\n        <Grid container justify=\"center\" style={{background: \"#FFF\"}}>\r\n            <ProductBar/>\r\n            <Grid item xs={6} align=\"center\">\r\n                <Typography variant=\"h5\">Create A Generator</Typography>\r\n                {<form noValidate autoComplete=\"off\">\r\n                    <TextField label=\"Price\" value={price} onChange={(event) => setPrice(event.target.value)}/> <br/>\r\n                    <TextField label=\"Sold\" value={sold} onChange={(event) => setSold(event.target.value)}/> <br/>\r\n                    <TextField label=\"Dimensions\" value={dimensions}\r\n                               onChange={(event) => setDimensions(event.target.value)}/> <br/>\r\n                    <TextField label=\"Fuel Capacity\" value={fuelCapacity}\r\n                               onChange={(event) => setFuelCapacity(event.target.value)}/> <br/>\r\n                    <TextField label=\"Power\" value={power} onChange={(event) => setPower(event.target.value)}/> <br/>\r\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}}\r\n                            onClick={handleCreate}>Create</Button>\r\n                </form>}\r\n\r\n            </Grid>\r\n            <Grid item xs={6} align=\"center\">\r\n                <Typography variant=\"h5\">Update A Generator</Typography>\r\n                {<form noValidate autoComplete=\"off\">\r\n                    <TextField label=\"ID\" value={id} onChange={(event) => setId(event.target.value)}/> <br/>\r\n                    <TextField label=\"Price\" value={price} onChange={(event) => setPrice(event.target.value)}/> <br/>\r\n                    <TextField label=\"Sold\" value={sold} onChange={(event) => setSold(event.target.value)}/> <br/>\r\n                    <TextField label=\"Dimensions\" value={dimensions}\r\n                               onChange={(event) => setDimensions(event.target.value)}/> <br/>\r\n                    <TextField label=\"Fuel Capacity\" value={fuelCapacity}\r\n                               onChange={(event) => setFuelCapacity(event.target.value)}/> <br/>\r\n                    <TextField label=\"Power\" value={power} onChange={(event) => setPower(event.target.value)}/> <br/>\r\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}}\r\n                            onClick={handleUpdate}>Update</Button>\r\n                </form>}\r\n            </Grid>\r\n            <Grid item xs={12} align=\"center\">\r\n                <Typography variant=\"h5\">All Generators</Typography>\r\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"left\">ID</TableCell>\r\n                            <TableCell align=\"left\">Price</TableCell>\r\n                            <TableCell align=\"right\">Type</TableCell>\r\n                            <TableCell align=\"right\">Sold</TableCell>\r\n                            <TableCell align=\"right\">Dimensions</TableCell>\r\n                            <TableCell align=\"right\">Fuel Capacity</TableCell>\r\n                            <TableCell align=\"right\">Power</TableCell>\r\n                            <TableCell align=\"right\">Customer ID</TableCell>\r\n                            <TableCell align=\"right\">Office IDs</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {rows != null ? rows.map(row => {\r\n                            return (\r\n                                <TableRow key={row.id}>\r\n                                    <TableCell>{row.id}</TableCell>\r\n                                    <TableCell>{row.price}</TableCell>\r\n                                    <TableCell>{row.type}</TableCell>\r\n                                    <TableCell>{row.sold}</TableCell>\r\n                                    <TableCell>{row.dimensions}</TableCell>\r\n                                    <TableCell>{row.fuelCapacity}</TableCell>\r\n                                    <TableCell>{row.power}</TableCell>\r\n                                    <TableCell>{row.customerId}</TableCell>\r\n                                    <TableCell>{row.officeIds}</TableCell>\r\n                                </TableRow>\r\n                            )\r\n                        }) : null}\r\n                    </TableBody>\r\n                </TableContainer>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Generator;","D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\components\\product\\product.js",["114","115"],"import React, {useEffect, useState} from 'react';\r\nimport axios from \"axios\";\r\nimport {\r\n    Button,\r\n    Grid,\r\n    Paper,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    TextField,\r\n    Typography\r\n} from \"@material-ui/core\";\r\n\r\nimport ProductBar from \"./productBar\"\r\n\r\nconst Product = (props) => {\r\n    let [rows, setRows] = useState(null);\r\n    const [id, setId] = useState(\"\");\r\n    const [price, setPrice] = useState(\"\");\r\n    const [sold, setSold] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        rows = rowValues()\r\n    }, [])\r\n\r\n    const rowValues = async () => {\r\n        let products;\r\n        let data = []\r\n\r\n        try {\r\n            const res = await axios({method: \"get\", url: \"/products\"})\r\n            products = res.data\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n\r\n        await Promise.all(products._embedded.generators.map(async g => {\r\n            const customerId = await getId(\"/products/\" + g._links.self.href.split(\"/\").pop() + \"/customer\")\r\n            const officeIds = await getIds(\"/products/\" + g._links.self.href.split(\"/\").pop() + \"/offices\", \"offices\")\r\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.price, g.type, g.sold ? \"True\" : \"False\", customerId, officeIds))\r\n        }))\r\n\r\n        await Promise.all(products._embedded.motors.map(async g => {\r\n            const customerId = await getId(\"/products/\" + g._links.self.href.split(\"/\").pop() + \"/customer\")\r\n            const officeIds = await getIds(\"/products/\" + g._links.self.href.split(\"/\").pop() + \"/offices\", \"offices\")\r\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.price, g.type, g.sold ? \"True\" : \"False\", customerId, officeIds))\r\n        }))\r\n\r\n        await Promise.all(products._embedded.upses.map(async g => {\r\n            const customerId = await getId(\"/products/\" + g._links.self.href.split(\"/\").pop() + \"/customer\")\r\n            const officeIds = await getIds(\"/products/\" + g._links.self.href.split(\"/\").pop() + \"/offices\", \"offices\")\r\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.price, g.type, g.sold ? \"True\" : \"False\", customerId, officeIds))\r\n        }))\r\n\r\n        await Promise.all(products._embedded.products.map(async g => {\r\n            const customerId = await getId(\"/products/\" + g._links.self.href.split(\"/\").pop() + \"/customer\")\r\n            const officeIds = await getIds(\"/products/\" + g._links.self.href.split(\"/\").pop() + \"/offices\", \"offices\")\r\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.price, g.type, g.sold ? \"True\" : \"False\", customerId, officeIds))\r\n        }))\r\n\r\n        data.sort((a, b) => {\r\n            return a.id - b.id\r\n        })\r\n\r\n        console.log(data)\r\n\r\n        setRows(data)\r\n    }\r\n\r\n    const getId = async (href) => {\r\n        let id;\r\n        try {\r\n            const res = await axios({method: \"GET\", url: href})\r\n            id = res.data._links.self.href.split(\"/\").pop()\r\n        } catch (e) {\r\n            id = \" \"\r\n        }\r\n\r\n        return id;\r\n    }\r\n\r\n    const getIds = async (href, partialUrl) => {\r\n        let ids = \"\"\r\n        try {\r\n            const res = await axios({method: \"GET\", url: href})\r\n            res.data._embedded[partialUrl].map((d => {\r\n                ids += d._links.self.href.split(\"/\").pop() + \" \"\r\n            }))\r\n        } catch (e) {\r\n            ids = \" \"\r\n        }\r\n\r\n        return ids;\r\n    }\r\n\r\n    const createData = (id, price, type, sold, customerId, officeIds) => {\r\n        return {id, price, type, sold, customerId, officeIds}\r\n    }\r\n\r\n    const handleCreate = async (event) => {\r\n        await axios({method: \"POST\", url: \"/products\", data: {type: \"o\", price: price, sold: sold}})\r\n            .then((res) => console.log(res))\r\n            .catch((err) => console.log(err))\r\n    }\r\n\r\n    const handleUpdate = async (event) => {\r\n        await axios({method: \"PUT\", url: \"/products/\" + id, data: {price: price, sold: sold}})\r\n            .then((res) => console.log(res))\r\n            .catch((err) => console.log(err))\r\n    }\r\n\r\n    return (\r\n        <Grid container justify=\"center\" style={{background: \"#FFF\"}}>\r\n            <ProductBar/>\r\n            <Grid item xs={6} align=\"center\">\r\n                <Typography variant=\"h5\">Create A Product (Type: Other)</Typography>\r\n                {<form noValidate autoComplete=\"off\">\r\n                    <TextField label=\"Price\" value={price} onChange={(event) => setPrice(event.target.value)}/> <br/>\r\n                    <TextField label=\"Sold\" value={sold} onChange={(event) => setSold(event.target.value)}/> <br/>\r\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}}\r\n                            onClick={handleCreate}>Create</Button>\r\n                </form>}\r\n\r\n            </Grid>\r\n            <Grid item xs={6} align=\"center\">\r\n                <Typography variant=\"h5\">Update A Product (Type: Other)</Typography>\r\n                {<form noValidate autoComplete=\"off\">\r\n                    <TextField label=\"ID\" value={id} onChange={(event) => setId(event.target.value)}/> <br/>\r\n                    <TextField label=\"Price\" value={price} onChange={(event) => setPrice(event.target.value)}/> <br/>\r\n                    <TextField label=\"Sold\" value={sold} onChange={(event) => setSold(event.target.value)}/> <br/>\r\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}}\r\n                            onClick={handleUpdate}>Update</Button>\r\n                </form>}\r\n            </Grid>\r\n            <Grid item xs={12} align=\"center\">\r\n                <Typography variant=\"h5\">All Products</Typography>\r\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"left\">ID</TableCell>\r\n                            <TableCell align=\"left\">Price</TableCell>\r\n                            <TableCell align=\"right\">Type</TableCell>\r\n                            <TableCell align=\"right\">Sold</TableCell>\r\n                            <TableCell align=\"right\">Customer Id</TableCell>\r\n                            <TableCell align=\"right\">Office Ids</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {rows != null ? rows.map(row => {\r\n                            return (\r\n                                <TableRow key={row.id}>\r\n                                    <TableCell>{row.id}</TableCell>\r\n                                    <TableCell>{row.price}</TableCell>\r\n                                    <TableCell>{row.type}</TableCell>\r\n                                    <TableCell>{row.sold}</TableCell>\r\n                                    <TableCell>{row.customerId}</TableCell>\r\n                                    <TableCell>{row.officeIds}</TableCell>\r\n                                </TableRow>\r\n                            )\r\n                        }) : null}\r\n                    </TableBody>\r\n                </TableContainer>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Product;","D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\Header.jsx",["116","117","118"],"import React from 'react';\r\nimport { AppBar, Button, Grid, Toolbar, Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Action from \"./Action\";\r\nimport {Route, withRouter} from \"react-router-dom\";\r\nimport fire from './fire';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    typographyStyles: {\r\n        flex: 1,\r\n        color: 'white',\r\n        fontSize: 20,\r\n        margin: theme.spacing(1),\r\n    },\r\n\r\n    margin: {\r\n      margin: theme.spacing(1),\r\n    },\r\n    extendedIcon: {\r\n      marginRight: theme.spacing(1),\r\n    },\r\n    buttonRoot: {\r\n        background: 'orange',\r\n        borderRadius: 5,\r\n        border: 5,\r\n        height: 31,\r\n        margin: theme.spacing(1),\r\n      }\r\n    \r\n  }));\r\n\r\nconst Header = props => {\r\n   \r\n    const classes = useStyles();\r\n\r\n    const handleButtonClick = pageURL => {\r\n     \r\n    };\r\n\r\n    return (\r\n    <AppBar position=\"static\">\r\n        <Toolbar>\r\n            <Grid container spacing={2} direction=\"column\">\r\n                <Grid item xs={12} container>\r\n                    <Grid item xs={5}>\r\n                      <Typography className={classes.typographyStyles}>\r\n                        Seri Bobinaj ve Serbosan Energy and Power Systems\r\n                      </Typography>  \r\n                    </Grid>\r\n                    <Grid item xs={2} />\r\n                    <Grid item xs={1}>\r\n                        <Button onClick={() => handleButtonClick('/Action')} variant=\"contained\" size=\"small\" color=\"white\" className={classes.buttonRoot}>\r\n                        Views\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item xs={1} />\r\n                    <Grid item xs={1}>\r\n                        <Button  variant=\"contained\" size=\"small\" color=\"white\" className={classes.buttonRoot}>\r\n                        Procedures\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item xs={1} />\r\n                    <Grid item xs={1}>\r\n                        <Button  onClick={() => fire.auth().signOut()} variant=\"contained\" size=\"small\" color=\"secondary\" className={classes.margin}>\r\n                        Logout\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Toolbar>\r\n    </AppBar>\r\n\r\n\r\n\r\n    );\r\n};\r\n\r\nexport default Header;","D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\components\\customer\\individualCustomer.js",["119","120","121"],"import React, {useEffect, useState} from 'react';\r\nimport axios from \"axios\";\r\nimport {\r\n    Button,\r\n    Grid,\r\n    Paper,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    TextField,\r\n    Typography\r\n} from \"@material-ui/core\";\r\n\r\nimport CustomerBar from \"./customerBar\"\r\n\r\nconst IndividualCustomer = (props) => {\r\n    let [rows, setRows] = useState(null)\r\n    const [id, setId] = useState(\"\")\r\n    const [address, setAddress] = useState(\"\")\r\n    const [phoneNumber, setPhoneNumber] = useState(\"\")\r\n    const [name, setName] = useState(\"\")\r\n    const [surname, setSurname] = useState(\"\")\r\n\r\n\r\n    useEffect(async () => {\r\n        rows = await rowValues()\r\n    }, [])\r\n\r\n    const rowValues = async () => {\r\n        let customers;\r\n        let data = []\r\n\r\n        await axios({method: \"get\", url: \"/customers\"})\r\n            .then(res => customers = res.data)\r\n            .catch(err => console.log(err))\r\n\r\n        customers._embedded.individualCustomers.map(g => {\r\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.address, g.phoneNumber, g.type, g.name, g.surname))\r\n        })\r\n\r\n        data.sort((a, b) => {\r\n            return a.id - b.id\r\n        })\r\n\r\n        setRows(data)\r\n    }\r\n\r\n    const createData = (id, address, phoneNumber, type, name, surname) => {\r\n        return {id, address, phoneNumber, type, name, surname,}\r\n    }\r\n\r\n    const handleCreate = async (event) => {\r\n        await axios({\r\n            method: \"POST\",\r\n            url: \"/individualCustomers\",\r\n            data: {type: \"i\", address, phoneNumber, name, surname}\r\n        })\r\n            .then((res) => console.log(res))\r\n            .catch((err) => console.log(err))\r\n    }\r\n\r\n    const handleUpdate = async (event) => {\r\n        await axios({method: \"PUT\", url: \"/individualCustomers/\" + id, data: {address, phoneNumber, name, surname}})\r\n            .then((res) => console.log(res))\r\n            .catch((err) => console.log(err))\r\n    }\r\n\r\n    return (\r\n        <Grid container justify=\"center\" style={{background: \"#FFF\"}}>\r\n            <CustomerBar/>\r\n            <Grid item xs={6} align=\"center\">\r\n                <Typography variant=\"h5\">Create an Individual Customer</Typography>\r\n                {<form noValidate autoComplete=\"off\">\r\n                    <TextField label=\"Address\" value={address} onChange={(event) => setAddress(event.target.value)}/>\r\n                    <br/>\r\n                    <TextField label=\"Phone Number\" value={phoneNumber}\r\n                               onChange={(event) => setPhoneNumber(event.target.value)}/> <br/>\r\n                    <TextField label=\"Name\" value={name} onChange={(event) => setName(event.target.value)}/> <br/>\r\n                    <TextField label=\"Surname\" value={surname} onChange={(event) => setSurname(event.target.value)}/>\r\n                    <br/>\r\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}}\r\n                            onClick={handleCreate}>Create</Button>\r\n                </form>}\r\n            </Grid>\r\n            <Grid item xs={6} align=\"center\">\r\n                <Typography variant=\"h5\">Update an Individual Customer</Typography>\r\n                {<form noValidate autoComplete=\"off\">\r\n                    <TextField label=\"ID\" value={id} onChange={(event) => setId(event.target.value)}/> <br/>\r\n                    <TextField label=\"Address\" value={address} onChange={(event) => setAddress(event.target.value)}/>\r\n                    <br/>\r\n                    <TextField label=\"Phone Number\" value={phoneNumber}\r\n                               onChange={(event) => setPhoneNumber(event.target.value)}/> <br/>\r\n                    <TextField label=\"Name\" value={name} onChange={(event) => setName(event.target.value)}/> <br/>\r\n                    <TextField label=\"Surname\" value={surname} onChange={(event) => setSurname(event.target.value)}/>\r\n                    <br/>\r\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}}\r\n                            onClick={handleUpdate}>Update</Button>\r\n                </form>}\r\n            </Grid>\r\n            <Grid item xs={12} align=\"center\">\r\n                <Typography variant=\"h5\">All Individual Customers</Typography>\r\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"left\">ID</TableCell>\r\n                            <TableCell align=\"left\">Address</TableCell>\r\n                            <TableCell align=\"right\">PhoneNumber</TableCell>\r\n                            <TableCell align=\"right\">Type</TableCell>\r\n                            <TableCell align=\"right\">Name</TableCell>\r\n                            <TableCell align=\"right\">Surname</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {rows != null ? rows.map(row => {\r\n                            return (\r\n                                <TableRow key={row.id}>\r\n                                    <TableCell>{row.id}</TableCell>\r\n                                    <TableCell>{row.address}</TableCell>\r\n                                    <TableCell>{row.phoneNumber}</TableCell>\r\n                                    <TableCell>{row.type}</TableCell>\r\n                                    <TableCell>{row.name}</TableCell>\r\n                                    <TableCell>{row.surname}</TableCell>\r\n                                </TableRow>\r\n                            )\r\n                        }) : null}\r\n                    </TableBody>\r\n                </TableContainer>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default IndividualCustomer;","D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\components\\customer\\customer.js",["122","123","124","125"],"import React, {useEffect, useState} from 'react';\r\nimport axios from \"axios\";\r\nimport {Grid, Paper, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\r\n\r\nimport CustomerBar from \"./customerBar\"\r\n\r\nconst Customer = (props) => {\r\n    let [rows, setRows] = useState(null)\r\n\r\n    useEffect(async () => {\r\n        rows = await rowValues()\r\n    }, [])\r\n\r\n    const rowValues = async () => {\r\n        let customers;\r\n        let data = []\r\n\r\n        try {\r\n            const res = await axios({method: \"get\", url: \"/customers\"})\r\n            customers = res.data\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n\r\n        customers._embedded.individualCustomers.map(g => {\r\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.address, g.phoneNumber, g.type))\r\n        })\r\n\r\n        customers._embedded.enterprises.map(g => {\r\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.address, g.phoneNumber, g.type))\r\n        })\r\n\r\n        data.sort((a, b) => {\r\n            return a.id - b.id\r\n        })\r\n\r\n        setRows(data)\r\n    }\r\n\r\n    const createData = (id, address, phoneNumber, type) => {\r\n        return {id, address, phoneNumber, type}\r\n    }\r\n\r\n    return (\r\n        <Grid container justify=\"center\" style={{}}>\r\n            <CustomerBar/>\r\n            <Grid item xs={12} align=\"center\">\r\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"left\">ID</TableCell>\r\n                            <TableCell align=\"left\">Address</TableCell>\r\n                            <TableCell align=\"right\">PhoneNumber</TableCell>\r\n                            <TableCell align=\"right\">Type</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {rows != null ? rows.map(row => {\r\n                            return (\r\n                                <TableRow key={row.id}>\r\n                                    <TableCell>{row.id}</TableCell>\r\n                                    <TableCell>{row.address}</TableCell>\r\n                                    <TableCell>{row.phoneNumber}</TableCell>\r\n                                    <TableCell>{row.type}</TableCell>\r\n                                </TableRow>\r\n                            )\r\n                        }) : null}\r\n                    </TableBody>\r\n                </TableContainer>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Customer;","D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\components\\employee\\employee.js",["126","127","128"],"import React, {useEffect, useState} from 'react';\r\nimport axios from \"axios\";\r\nimport {\r\n    Button,\r\n    Grid,\r\n    Paper,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    TextField,\r\n    Typography\r\n} from \"@material-ui/core\";\r\n\r\n\r\nconst Employee = (props) => {\r\n    let [rows, setRows] = useState(null)\r\n    const [id, setId] = useState(\"\")\r\n    const [name, setName] = useState(\"\")\r\n    const [surname, setSurname] = useState(\"\")\r\n    const [mail, setMail] = useState(\"\")\r\n    const [phoneNumber, setPhoneNumber] = useState(\"\")\r\n    const [address, setAddress] = useState(\"\")\r\n    const [birthdate, setBirthDate] = useState(\"\")\r\n    const [salary, setSalary] = useState(\"\")\r\n\r\n    useEffect(async () => {\r\n        rows = await rowValues()\r\n    }, [])\r\n\r\n    const rowValues = async () => {\r\n        let employees;\r\n        let data = []\r\n\r\n        try {\r\n            const res = await axios({method: \"get\", url: \"/employees\"})\r\n            employees = res.data\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n\r\n        await Promise.all(employees._embedded.employees.map(async g => {\r\n            const officeIds = await getIds(\"/employees/\" + g._links.self.href.split(\"/\").pop() + \"/offices\", \"offices\")\r\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.name, g.surname, g.mail, g.phoneNumber, g.address, g.age, g.birthdate, g.salary, officeIds))\r\n        }))\r\n\r\n        setRows(data)\r\n    }\r\n\r\n    const getIds = async (href, partialUrl) => {\r\n        let ids = \"\"\r\n        try {\r\n            const res = await axios({method: \"GET\", url: href})\r\n            res.data._embedded[partialUrl].map((d => {\r\n                ids += d._links.self.href.split(\"/\").pop() + \" \"\r\n            }))\r\n        } catch (e) {\r\n            ids = \" \"\r\n        }\r\n\r\n        return ids;\r\n    }\r\n\r\n    const createData = (id, name, surname, mail, phoneNumber, address, age, birthdate, salary, officeIds) => {\r\n        return {id, name, surname, mail, phoneNumber, address, age, birthdate, salary, officeIds}\r\n    }\r\n\r\n    const handleCreate = async (event) => {\r\n        await axios({\r\n            method: \"POST\",\r\n            url: \"/employees\",\r\n            data: {name, surname, mail, phoneNumber, address, birthdate, salary}\r\n        })\r\n            .then((res) => console.log(res))\r\n            .catch((err) => console.log(err))\r\n    }\r\n\r\n    const handleUpdate = async (event) => {\r\n        await axios({\r\n            method: \"PUT\",\r\n            url: \"/employees/\" + id,\r\n            data: {name, surname, mail, phoneNumber, address, birthdate, salary}\r\n        })\r\n            .then((res) => console.log(res))\r\n            .catch((err) => console.log(err))\r\n    }\r\n\r\n    return (\r\n        <Grid container justify=\"center\" style={{background: \"#FFF\"}}>\r\n            <Grid item xs={6} align=\"center\">\r\n                <Typography variant=\"h5\">Create a Employee</Typography>\r\n                {<form noValidate autoComplete=\"off\">\r\n                    <TextField label=\"Name\" value={name} onChange={(event) => setName(event.target.value)}/> <br/>\r\n                    <TextField label=\"Surname\" value={surname} onChange={(event) => setSurname(event.target.value)}/>\r\n                    <br/>\r\n                    <TextField label=\"Mail\" value={mail} onChange={(event) => setMail(event.target.value)}/> <br/>\r\n                    <TextField label=\"Phone Number\" value={phoneNumber}\r\n                               onChange={(event) => setPhoneNumber(event.target.value)}/> <br/>\r\n                    <TextField label=\"Address\" value={address} onChange={(event) => setAddress(event.target.value)}/>\r\n                    <br/>\r\n                    <TextField label=\"Birthdate\" value={birthdate}\r\n                               onChange={(event) => setBirthDate(event.target.value)}/> <br/>\r\n                    <TextField label=\"Salary\" value={salary} onChange={(event) => setSalary(event.target.value)}/> <br/>\r\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}}\r\n                            onClick={handleCreate}>Create</Button>\r\n                </form>}\r\n            </Grid>\r\n            <Grid item xs={6} align=\"center\">\r\n                <Typography variant=\"h5\">Update a Employee</Typography>\r\n                {<form noValidate autoComplete=\"off\">\r\n                    <TextField label=\"ID\" value={id} onChange={(event) => setId(event.target.value)}/> <br/>\r\n                    <TextField label=\"Name\" value={name} onChange={(event) => setName(event.target.value)}/> <br/>\r\n                    <TextField label=\"Surname\" value={surname} onChange={(event) => setSurname(event.target.value)}/>\r\n                    <br/>\r\n                    <TextField label=\"Mail\" value={mail} onChange={(event) => setMail(event.target.value)}/> <br/>\r\n                    <TextField label=\"Phone Number\" value={phoneNumber}\r\n                               onChange={(event) => setPhoneNumber(event.target.value)}/> <br/>\r\n                    <TextField label=\"Address\" value={address} onChange={(event) => setAddress(event.target.value)}/>\r\n                    <br/>\r\n                    <TextField label=\"Birthdate\" value={birthdate}\r\n                               onChange={(event) => setBirthDate(event.target.value)}/> <br/>\r\n                    <TextField label=\"Salary\" value={salary} onChange={(event) => setSalary(event.target.value)}/> <br/>\r\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}}\r\n                            onClick={handleUpdate}>Update</Button>\r\n                </form>}\r\n            </Grid>\r\n            <Grid item xs={12} align=\"center\">\r\n                <Typography variant=\"h5\">All Employees </Typography>\r\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"left\">ID</TableCell>\r\n                            <TableCell align=\"left\">Name</TableCell>\r\n                            <TableCell align=\"right\">Surname</TableCell>\r\n                            <TableCell align=\"right\">Mail</TableCell>\r\n                            <TableCell align=\"right\">Phone Number</TableCell>\r\n                            <TableCell align=\"right\">Address</TableCell>\r\n                            <TableCell align=\"right\">Age</TableCell>\r\n                            <TableCell align=\"right\">Birthdate</TableCell>\r\n                            <TableCell align=\"right\">Salary</TableCell>\r\n                            <TableCell align=\"right\">Office IDs</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {rows != null ? rows.map(row => {\r\n                            return (\r\n                                <TableRow key={row.id}>\r\n                                    <TableCell>{row.id}</TableCell>\r\n                                    <TableCell>{row.name}</TableCell>\r\n                                    <TableCell>{row.surname}</TableCell>\r\n                                    <TableCell>{row.mail}</TableCell>\r\n                                    <TableCell>{row.phoneNumber}</TableCell>\r\n                                    <TableCell>{row.address}</TableCell>\r\n                                    <TableCell>{row.age}</TableCell>\r\n                                    <TableCell>{row.birthdate}</TableCell>\r\n                                    <TableCell>{row.salary}</TableCell>\r\n                                    <TableCell>{row.officeIds}</TableCell>\r\n                                </TableRow>\r\n                            )\r\n                        }) : null}\r\n                    </TableBody>\r\n                </TableContainer>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Employee;","D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\components\\product\\ups.js",["129","130","131"],"import React, {useEffect, useState} from 'react';\r\nimport axios from \"axios\";\r\nimport {\r\n    Button,\r\n    Grid,\r\n    Paper,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    TextField,\r\n    Typography\r\n} from \"@material-ui/core\";\r\n\r\nimport ProductBar from \"./productBar\"\r\n\r\nconst UPS = (props) => {\r\n    let [rows, setRows] = useState(null)\r\n    const [id, setId] = useState(\"\");\r\n    const [price, setPrice] = useState(\"\");\r\n    const [sold, setSold] = useState(\"\");\r\n    const [capacity, setCapacity] = useState(\"\");\r\n    const [dimensions, setDimensions] = useState(\"\");\r\n    const [voltage, setVoltage] = useState(\"\");\r\n\r\n    useEffect(async () => {\r\n        rows = await rowValues()\r\n    }, [])\r\n\r\n    const rowValues = async () => {\r\n        let products;\r\n        let data = []\r\n\r\n        try {\r\n            const res = await axios({method: \"get\", url: \"/products\"})\r\n            products = res.data\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n\r\n        await Promise.all(products._embedded.upses.map(async g => {\r\n            const customerId = await getId(\"/upses/\" + g._links.self.href.split(\"/\").pop() + \"/customer\")\r\n            const officeIds = await getIds(\"/upses/\" + g._links.self.href.split(\"/\").pop() + \"/offices\", \"offices\")\r\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.price, g.type, g.sold ? \"True\" : \"False\", g.capacity, g.dimensions, g.voltage, customerId, officeIds))\r\n        }))\r\n\r\n\r\n        data.sort((a, b) => {\r\n            return a.id - b.id\r\n        })\r\n\r\n        setRows(data)\r\n    }\r\n\r\n    const getId = async (href) => {\r\n        let id;\r\n        try {\r\n            const res = await axios({method: \"GET\", url: href})\r\n            id = res.data._links.self.href.split(\"/\").pop()\r\n        } catch (e) {\r\n            id = \" \"\r\n        }\r\n        return id;\r\n    }\r\n\r\n    const getIds = async (href, partialUrl) => {\r\n        let ids = \"\"\r\n        try {\r\n            const res = await axios({method: \"GET\", url: href})\r\n            res.data._embedded[partialUrl].map((d => {\r\n                ids += d._links.self.href.split(\"/\").pop() + \" \"\r\n            }))\r\n        } catch (e) {\r\n            ids = \" \"\r\n        }\r\n\r\n        return ids;\r\n    }\r\n\r\n\r\n    const createData = (id, price, type, sold, capacity, dimensions, voltage, customerId, officeIds) => {\r\n        return {id, price, type, sold, capacity, dimensions, voltage, customerId, officeIds}\r\n    }\r\n\r\n    const handleCreate = async (event) => {\r\n        await axios({method: \"POST\", url: \"/upses\", data: {type: \"u\", price, sold, capacity, dimensions, voltage}})\r\n            .then((res) => console.log(res))\r\n            .catch((err) => console.log(err))\r\n    }\r\n\r\n    const handleUpdate = async (event) => {\r\n        await axios({\r\n            method: \"PUT\",\r\n            url: \"/upses/\" + id,\r\n            data: {price: price, sold: sold, capacity, dimensions, voltage}\r\n        })\r\n            .then((res) => console.log(res))\r\n            .catch((err) => console.log(err))\r\n    }\r\n\r\n    return (\r\n        <Grid container justify=\"center\" style={{background: \"#FFF\"}}>\r\n            <ProductBar/>\r\n            <Grid item xs={6} align=\"center\">\r\n                <Typography variant=\"h5\">Create a UPS</Typography>\r\n                {<form noValidate autoComplete=\"off\">\r\n                    <TextField label=\"Price\" value={price} onChange={(event) => setPrice(event.target.value)}/> <br/>\r\n                    <TextField label=\"Sold\" value={sold} onChange={(event) => setSold(event.target.value)}/> <br/>\r\n                    <TextField label=\"Capacity\" value={capacity} onChange={(event) => setCapacity(event.target.value)}/>\r\n                    <br/>\r\n                    <TextField label=\"Dimensions\" value={dimensions}\r\n                               onChange={(event) => setDimensions(event.target.value)}/> <br/>\r\n                    <TextField label=\"Voltage\" value={voltage} onChange={(event) => setVoltage(event.target.value)}/>\r\n                    <br/>\r\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}}\r\n                            onClick={handleCreate}>Create</Button>\r\n                </form>}\r\n\r\n            </Grid>\r\n            <Grid item xs={6} align=\"center\">\r\n                <Typography variant=\"h5\">Update a UPS</Typography>\r\n                {<form noValidate autoComplete=\"off\">\r\n                    <TextField label=\"ID\" value={id} onChange={(event) => setId(event.target.value)}/> <br/>\r\n                    <TextField label=\"Price\" value={price} onChange={(event) => setPrice(event.target.value)}/> <br/>\r\n                    <TextField label=\"Sold\" value={sold} onChange={(event) => setSold(event.target.value)}/> <br/>\r\n                    <TextField label=\"Capacity\" value={capacity} onChange={(event) => setCapacity(event.target.value)}/>\r\n                    <br/>\r\n                    <TextField label=\"Dimensions\" value={dimensions}\r\n                               onChange={(event) => setDimensions(event.target.value)}/> <br/>\r\n                    <TextField label=\"Voltage\" value={voltage} onChange={(event) => setVoltage(event.target.value)}/>\r\n                    <br/>\r\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}}\r\n                            onClick={handleUpdate}>Update</Button>\r\n                </form>}\r\n            </Grid>\r\n            <Grid item xs={12} align=\"center\">\r\n                <Typography variant=\"h5\">All UPSES</Typography>\r\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"left\">ID</TableCell>\r\n                            <TableCell align=\"left\">Price</TableCell>\r\n                            <TableCell align=\"right\">Type</TableCell>\r\n                            <TableCell align=\"right\">Sold</TableCell>\r\n                            <TableCell align=\"right\">Capacity</TableCell>\r\n                            <TableCell align=\"right\">Dimensions</TableCell>\r\n                            <TableCell align=\"right\">Voltage</TableCell>\r\n                            <TableCell align=\"right\">Customer ID</TableCell>\r\n                            <TableCell align=\"right\">Office IDS</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {rows != null ? rows.map(row => {\r\n                            return (\r\n                                <TableRow key={row.id}>\r\n                                    <TableCell>{row.id}</TableCell>\r\n                                    <TableCell>{row.price}</TableCell>\r\n                                    <TableCell>{row.type}</TableCell>\r\n                                    <TableCell>{row.sold}</TableCell>\r\n                                    <TableCell>{row.capacity}</TableCell>\r\n                                    <TableCell>{row.dimensions}</TableCell>\r\n                                    <TableCell>{row.voltage}</TableCell>\r\n                                    <TableCell>{row.customerId}</TableCell>\r\n                                    <TableCell>{row.officeIds}</TableCell>\r\n                                </TableRow>\r\n                            )\r\n                        }) : null}\r\n                    </TableBody>\r\n                </TableContainer>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default UPS;","D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\components\\customer\\enterprise.js",["132","133","134"],"import React, {useEffect, useState} from 'react';\r\nimport axios from \"axios\";\r\nimport {\r\n    Button,\r\n    Grid,\r\n    Paper,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    TextField,\r\n    Typography\r\n} from \"@material-ui/core\";\r\n\r\nimport CustomerBar from \"./customerBar\"\r\n\r\nconst Enterprise = (props) => {\r\n    let [rows, setRows] = useState(null)\r\n    const [id, setId] = useState(\"\")\r\n    const [address, setAddress] = useState(\"\")\r\n    const [phoneNumber, setPhoneNumber] = useState(\"\")\r\n    const [enterpriseName, setEnterpriseName] = useState(\"\")\r\n\r\n    useEffect(async () => {\r\n        rows = await rowValues()\r\n    }, [])\r\n\r\n    const rowValues = async () => {\r\n        let customers;\r\n        let data = []\r\n\r\n        await axios({method: \"get\", url: \"/customers\"})\r\n            .then(res => customers = res.data)\r\n            .catch(err => console.log(err))\r\n\r\n        console.log(customers)\r\n\r\n        customers._embedded.enterprises.map(g => {\r\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.address, g.phoneNumber, g.enterpriseName, g.type))\r\n        })\r\n\r\n        data.sort((a, b) => {\r\n            return a.id - b.id\r\n        })\r\n\r\n        setRows(data)\r\n    }\r\n\r\n    const createData = (id, address, phoneNumber, enterpriseName, type) => {\r\n        return {id, address, phoneNumber, enterpriseName, type}\r\n    }\r\n\r\n    const handleCreate = async (event) => {\r\n        await axios({method: \"POST\", url: \"/enterprises\", data: {type: \"e\", address, phoneNumber, enterpriseName}})\r\n            .then((res) => console.log(res))\r\n            .catch((err) => console.log(err))\r\n    }\r\n\r\n    const handleUpdate = async (event) => {\r\n        await axios({method: \"PUT\", url: \"/enterprises/\" + id, data: {address, phoneNumber, enterpriseName}})\r\n            .then((res) => console.log(res))\r\n            .catch((err) => console.log(err))\r\n    }\r\n\r\n    return (\r\n        <Grid container justify=\"center\" style={{background: \"#FFF\"}}>\r\n            <CustomerBar/>\r\n            <Grid item xs={6} align=\"center\">\r\n                <Typography variant=\"h5\">Create an Individual Customer</Typography>\r\n                {<form noValidate autoComplete=\"off\">\r\n                    <TextField label=\"Address\" value={address} onChange={(event) => setAddress(event.target.value)}/>\r\n                    <br/>\r\n                    <TextField label=\"Phone Number\" value={phoneNumber}\r\n                               onChange={(event) => setPhoneNumber(event.target.value)}/> <br/>\r\n                    <TextField label=\"Enterprise Name\" value={enterpriseName}\r\n                               onChange={(event) => setEnterpriseName(event.target.value)}/> <br/>\r\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}}\r\n                            onClick={handleCreate}>Create</Button>\r\n                </form>}\r\n            </Grid>\r\n            <Grid item xs={6} align=\"center\">\r\n                <Typography variant=\"h5\">Update an Individual Customer</Typography>\r\n                {<form noValidate autoComplete=\"off\">\r\n                    <TextField label=\"ID\" value={id} onChange={(event) => setId(event.target.value)}/> <br/>\r\n                    <TextField label=\"Address\" value={address} onChange={(event) => setAddress(event.target.value)}/>\r\n                    <br/>\r\n                    <TextField label=\"Phone Number\" value={phoneNumber}\r\n                               onChange={(event) => setPhoneNumber(event.target.value)}/> <br/>\r\n                    <TextField label=\"Enterprise Name\" value={enterpriseName}\r\n                               onChange={(event) => setEnterpriseName(event.target.value)}/> <br/>\r\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}}\r\n                            onClick={handleUpdate}>Update</Button>\r\n                </form>}\r\n            </Grid>\r\n            <Grid item xs={12} align=\"center\">\r\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"left\">ID</TableCell>\r\n                            <TableCell align=\"left\">Address</TableCell>\r\n                            <TableCell align=\"right\">PhoneNumber</TableCell>\r\n                            <TableCell align=\"right\">Type</TableCell>\r\n                            <TableCell align=\"right\">Enterprise Name</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {rows != null ? rows.map(row => {\r\n                            return (\r\n                                <TableRow key={row.id}>\r\n                                    <TableCell>{row.id}</TableCell>\r\n                                    <TableCell>{row.address}</TableCell>\r\n                                    <TableCell>{row.phoneNumber}</TableCell>\r\n                                    <TableCell>{row.type}</TableCell>\r\n                                    <TableCell>{row.enterpriseName}</TableCell>\r\n                                </TableRow>\r\n                            )\r\n                        }) : null}\r\n                    </TableBody>\r\n                </TableContainer>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Enterprise;","D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\components\\office\\offices.js",["135","136","137"],"import React, {useEffect, useState} from 'react';\r\nimport axios from \"axios\";\r\nimport {\r\n    Button,\r\n    Grid,\r\n    Paper,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    TextField,\r\n    Typography\r\n} from \"@material-ui/core\";\r\n\r\n\r\nconst Office = (props) => {\r\n    let [rows, setRows] = useState(null)\r\n    const [id, setId] = useState(\"\")\r\n    const [address, setAddress] = useState(\"\")\r\n    const [phoneNumber, setPhoneNumber] = useState(\"\")\r\n\r\n    useEffect(async () => {\r\n        rows = await rowValues()\r\n    }, [])\r\n\r\n    const rowValues = async () => {\r\n        let offices;\r\n        let data = []\r\n\r\n        try {\r\n            const res = await axios({method: \"get\", url: \"/offices\"})\r\n            offices = res.data\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n\r\n\r\n        await Promise.all(offices._embedded.offices.map(async g => {\r\n            const materialDates = await getIds(\"/offices/\" + g._links.self.href.split(\"/\").pop() + \"/materials\", \"materials\")\r\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.address, g.phoneNumber, materialDates))\r\n        }))\r\n\r\n        setRows(data)\r\n    }\r\n\r\n    const getIds = async (href, partialUrl) => {\r\n        let ids = \"\"\r\n        try {\r\n            const res = await axios({method: \"GET\", url: href})\r\n            res.data._embedded[partialUrl].map((d => {\r\n                ids += d._links.self.href.split(\"/\").pop() + \", \"\r\n            }))\r\n        } catch (e) {\r\n            ids = \" \"\r\n        }\r\n\r\n        return ids;\r\n    }\r\n\r\n    const createData = (id, address, phoneNumber, materialDates) => {\r\n        return {id, address, phoneNumber, materialDates}\r\n    }\r\n\r\n    const handleCreate = async (event) => {\r\n        await axios({method: \"POST\", url: \"/offices\", data: {address, phoneNumber}})\r\n            .then((res) => console.log(res))\r\n            .catch((err) => console.log(err))\r\n    }\r\n\r\n    const handleUpdate = async (event) => {\r\n        await axios({method: \"PUT\", url: \"/offices/\" + id, data: {address, phoneNumber}})\r\n            .then((res) => console.log(res))\r\n            .catch((err) => console.log(err))\r\n    }\r\n\r\n    return (\r\n        <Grid container justify=\"center\" style={{background: \"#FFF\"}}>\r\n            <Grid item xs={6} align=\"center\">\r\n                <Typography variant=\"h5\">Create a Office</Typography>\r\n                {<form noValidate autoComplete=\"off\">\r\n                    <TextField label=\"Address\" value={address} onChange={(event) => setAddress(event.target.value)}/>\r\n                    <br/>\r\n                    <TextField label=\"PhoneNumber\" value={phoneNumber}\r\n                               onChange={(event) => setPhoneNumber(event.target.value)}/> <br/>\r\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}}\r\n                            onClick={handleCreate}>Create</Button>\r\n                </form>}\r\n            </Grid>\r\n            <Grid item xs={6} align=\"center\">\r\n                <Typography variant=\"h5\">Update a Office</Typography>\r\n                {<form noValidate autoComplete=\"off\">\r\n                    <TextField label=\"ID\" value={id} onChange={(event) => setId(event.target.value)}/> <br/>\r\n                    <TextField label=\"Address\" value={address} onChange={(event) => setAddress(event.target.value)}/>\r\n                    <br/>\r\n                    <TextField label=\"PhoneNumber\" value={phoneNumber}\r\n                               onChange={(event) => setPhoneNumber(event.target.value)}/> <br/>\r\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}}\r\n                            onClick={handleUpdate}>Update</Button>\r\n                </form>}\r\n            </Grid>\r\n            <Grid item xs={12} align=\"center\">\r\n                <Typography variant=\"h5\">All Offices</Typography>\r\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"left\">ID</TableCell>\r\n                            <TableCell align=\"left\">Address</TableCell>\r\n                            <TableCell align=\"right\">Phone Number</TableCell>\r\n                            <TableCell align=\"right\">Material Dates</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {rows != null ? rows.map(row => {\r\n                            return (\r\n                                <TableRow key={row.id}>\r\n                                    <TableCell>{row.id}</TableCell>\r\n                                    <TableCell>{row.address}</TableCell>\r\n                                    <TableCell>{row.phoneNumber}</TableCell>\r\n                                    <TableCell>{row.materialDates}</TableCell>\r\n                                </TableRow>\r\n                            )\r\n                        }) : null}\r\n                    </TableBody>\r\n                </TableContainer>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Office;","D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\components\\materials\\materials.js",["138","139","140"],"import React, {useEffect, useState} from 'react';\r\nimport axios from \"axios\";\r\nimport {\r\n    Button,\r\n    Grid,\r\n    Paper,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    TextField,\r\n    Typography\r\n} from \"@material-ui/core\";\r\n\r\n\r\nconst Material = (props) => {\r\n    let [rows, setRows] = useState(null)\r\n    const [id, setId] = useState(\"\")\r\n    const [type, setType] = useState(\"\")\r\n    const [amount, setAmount] = useState(\"\")\r\n    const [price, setPrice] = useState(\"\")\r\n\r\n    useEffect(async () => {\r\n        rows = await rowValues()\r\n    }, [])\r\n\r\n    const rowValues = async () => {\r\n        let materials;\r\n        let data = []\r\n\r\n        await axios({method: \"get\", url: \"/materials\"})\r\n            .then(res => materials = res.data)\r\n            .catch(err => console.log(err))\r\n\r\n        console.log(materials)\r\n\r\n        materials._embedded.materials.map(g => {\r\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.type, g.amount, g.price))\r\n        })\r\n\r\n        setRows(data)\r\n    }\r\n\r\n    const createData = (id, type, amount, price) => {\r\n        return {id, type, amount, price}\r\n    }\r\n\r\n    const handleCreate = async (event) => {\r\n        await axios({method: \"POST\", url: \"/materials\", data: {type, amount, price}})\r\n            .then((res) => console.log(res))\r\n            .catch((err) => console.log(err))\r\n    }\r\n\r\n    const handleUpdate = async (event) => {\r\n        await axios({method: \"PUT\", url: \"/suppliers/\" + id, data: {type, amount, price}})\r\n            .then((res) => console.log(res))\r\n            .catch((err) => console.log(err))\r\n    }\r\n\r\n    return (\r\n        <Grid container justify=\"center\" style={{background: \"#FFF\"}}>\r\n            <Grid item xs={6} align=\"center\">\r\n                <Typography variant=\"h5\">Create a Supplier</Typography>\r\n                {<form noValidate autoComplete=\"off\">\r\n                    <TextField label=\"Type\" value={type} onChange={(event) => setType(event.target.value)}/> <br/>\r\n                    <TextField label=\"Amount\" value={amount} onChange={(event) => setAmount(event.target.value)}/> <br/>\r\n                    <TextField label=\"Price\" value={price} onChange={(event) => setPrice(event.target.value)}/> <br/>\r\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}}\r\n                            onClick={handleCreate}>Create</Button>\r\n                </form>}\r\n            </Grid>\r\n            <Grid item xs={6} align=\"center\">\r\n                <Typography variant=\"h5\">Update a Supplier</Typography>\r\n                {<form noValidate autoComplete=\"off\">\r\n                    <TextField label=\"ID\" value={id} onChange={(event) => setId(event.target.value)}/> <br/>\r\n                    <TextField label=\"Type\" value={type} onChange={(event) => setType(event.target.value)}/> <br/>\r\n                    <TextField label=\"Amount\" value={amount} onChange={(event) => setAmount(event.target.value)}/> <br/>\r\n                    <TextField label=\"Price\" value={price} onChange={(event) => setPrice(event.target.value)}/> <br/>\r\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}}\r\n                            onClick={handleUpdate}>Update</Button>\r\n                </form>}\r\n            </Grid>\r\n            <Grid item xs={12} align=\"center\">\r\n                <Typography variant=\"h5\">All Materials</Typography>\r\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"left\">ID</TableCell>\r\n                            <TableCell align=\"left\">Type</TableCell>\r\n                            <TableCell align=\"right\">Amount</TableCell>\r\n                            <TableCell align=\"right\">Price</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {rows != null ? rows.map(row => {\r\n                            return (\r\n                                <TableRow key={row.id}>\r\n                                    <TableCell>{row.id}</TableCell>\r\n                                    <TableCell>{row.type}</TableCell>\r\n                                    <TableCell>{row.amount}</TableCell>\r\n                                    <TableCell>{row.price}</TableCell>\r\n                                </TableRow>\r\n                            )\r\n                        }) : null}\r\n                    </TableBody>\r\n                </TableContainer>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Material;","D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\components\\service\\service.js",["141","142"],"import React, {useEffect, useState} from 'react';\r\nimport axios from \"axios\";\r\nimport {\r\n    Button,\r\n    Grid,\r\n    Paper,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    TextField,\r\n    Typography\r\n} from \"@material-ui/core\";\r\n\r\n\r\nconst Service = (props) => {\r\n    let [rows, setRows] = useState(null)\r\n    const [id, setId] = useState(\"\")\r\n    const [startDate, setStartDate] = useState(\"\")\r\n    const [endDate, setEndDate] = useState(\"\")\r\n    const [cost, setCost] = useState(\"\")\r\n\r\n    useEffect(async () => {\r\n        rows = await rowValues()\r\n    }, [])\r\n\r\n    const rowValues = async () => {\r\n        let services;\r\n        let data = []\r\n\r\n        try {\r\n            const res = await axios({method: \"get\", url: \"/services\"})\r\n            services = res.data\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n\r\n        await Promise.all(services._embedded.services.map(async g => {\r\n            const officeId = await getId(\"/services/\" + g._links.self.href.split(\"/\").pop() + \"/office\")\r\n            const customerId = await getId(\"/services/\" + g._links.self.href.split(\"/\").pop() + \"/customer\")\r\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.startDate, g.endDate, g.duration, g.cost, customerId, officeId))\r\n        }))\r\n\r\n        setRows(data)\r\n    }\r\n\r\n    const getId = async (href) => {\r\n        let id;\r\n        try {\r\n            const res = await axios({method: \"GET\", url: href})\r\n            id = res.data._links.self.href.split(\"/\").pop()\r\n        } catch (e) {\r\n            id = \" \"\r\n        }\r\n\r\n        return id;\r\n    }\r\n\r\n    const createData = (id, startDate, endDate, duration, cost, customerId, officeId) => {\r\n        return {id, startDate, endDate, duration, cost, customerId, officeId}\r\n    }\r\n\r\n    const handleCreate = async (event) => {\r\n        await axios({method: \"POST\", url: \"/services\", data: {startDate, endDate, cost}})\r\n            .then((res) => console.log(res))\r\n            .catch((err) => console.log(err))\r\n    }\r\n\r\n    const handleUpdate = async (event) => {\r\n        await axios({method: \"PUT\", url: \"/services/\" + id, data: {startDate, endDate, cost}})\r\n            .then((res) => console.log(res))\r\n            .catch((err) => console.log(err))\r\n    }\r\n\r\n    return (\r\n        <Grid container justify=\"center\" style={{background: \"#FFF\"}}>\r\n            <Grid item xs={6} align=\"center\">\r\n                <Typography variant=\"h5\">Create a Service</Typography>\r\n                {<form noValidate autoComplete=\"off\">\r\n                    <TextField label=\"Start Date\" value={startDate}\r\n                               onChange={(event) => setStartDate(event.target.value)}/> <br/>\r\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}}\r\n                            onClick={handleCreate}>Create</Button>\r\n                </form>}\r\n            </Grid>\r\n            <Grid item xs={6} align=\"center\">\r\n                <Typography variant=\"h5\">Update a Service</Typography>\r\n                {<form noValidate autoComplete=\"off\">\r\n                    <TextField label=\"ID\" value={id} onChange={(event) => setId(event.target.value)}/> <br/>\r\n                    <TextField label=\"Start Date\" value={startDate}\r\n                               onChange={(event) => setStartDate(event.target.value)}/> <br/>\r\n                    <TextField label=\"EndDate\" value={endDate} onChange={(event) => setEndDate(event.target.value)}/>\r\n                    <br/>\r\n                    <TextField label=\"Cost\" value={cost} onChange={(event) => setCost(event.target.value)}/> <br/>\r\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}}\r\n                            onClick={handleUpdate}>Update</Button>\r\n                </form>}\r\n            </Grid>\r\n            <Grid item xs={12} align=\"center\">\r\n                <Typography variant=\"h5\">All Services</Typography>\r\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"left\">ID</TableCell>\r\n                            <TableCell align=\"left\">Start Date</TableCell>\r\n                            <TableCell align=\"right\">End Date</TableCell>\r\n                            <TableCell align=\"right\">Duration</TableCell>\r\n                            <TableCell align=\"right\">Cost</TableCell>\r\n                            <TableCell align=\"right\">Customer ID</TableCell>\r\n                            <TableCell align=\"right\">Office ID</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {rows != null ? rows.map(row => {\r\n                            return (\r\n                                <TableRow key={row.id}>\r\n                                    <TableCell>{row.id}</TableCell>\r\n                                    <TableCell>{row.startDate}</TableCell>\r\n                                    <TableCell>{row.endDate}</TableCell>\r\n                                    <TableCell>{row.duration}</TableCell>\r\n                                    <TableCell>{row.cost}</TableCell>\r\n                                    <TableCell>{row.customerId}</TableCell>\r\n                                    <TableCell>{row.officeId}</TableCell>\r\n                                </TableRow>\r\n                            )\r\n                        }) : null}\r\n                    </TableBody>\r\n                </TableContainer>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Service;","D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\components\\supplier\\supplier.js",["143","144","145"],"import React, {useEffect, useState} from 'react';\r\nimport axios from \"axios\";\r\nimport {\r\n    Button,\r\n    Grid,\r\n    Paper,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    TextField,\r\n    Typography\r\n} from \"@material-ui/core\";\r\n\r\n\r\nconst Office = (props) => {\r\n    let [rows, setRows] = useState(null)\r\n    const [id, setId] = useState(\"\")\r\n    const [name, setName] = useState(\"\")\r\n    const [address, setAddress] = useState(\"\")\r\n    const [mail, setMail] = useState(\"\")\r\n    const [phoneNumber, setPhoneNumber] = useState(\"\")\r\n\r\n    useEffect(async () => {\r\n        rows = await rowValues()\r\n    }, [])\r\n\r\n    const rowValues = async () => {\r\n        let suppliers;\r\n        let data = []\r\n\r\n        try {\r\n            const res = await axios({method: \"get\", url: \"/suppliers\"})\r\n            suppliers = res.data\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n\r\n\r\n        await Promise.all(suppliers._embedded.suppliers.map(async g => {\r\n            const materialDates = await getIds(\"/suppliers/\" + g._links.self.href.split(\"/\").pop() + \"/materials\", \"materials\")\r\n            data.push(createData(g._links.self.href.split(\"/\").pop(), g.name, g.address, g.mail, g.phoneNumber, materialDates))\r\n        }))\r\n\r\n        setRows(data)\r\n    }\r\n\r\n    const getIds = async (href, partialUrl) => {\r\n        let ids = \"\"\r\n        try {\r\n            const res = await axios({method: \"GET\", url: href})\r\n            res.data._embedded[partialUrl].map((d => {\r\n                ids += d._links.self.href.split(\"/\").pop() + \", \"\r\n            }))\r\n        } catch (e) {\r\n            ids = \" \"\r\n        }\r\n\r\n        return ids;\r\n    }\r\n\r\n    const createData = (id, name, address, mail, phoneNumber, materialDates) => {\r\n        return {id, name, address, mail, phoneNumber, materialDates}\r\n    }\r\n\r\n    const handleCreate = async (event) => {\r\n        await axios({method: \"POST\", url: \"/suppliers\", data: {name, address, mail, phoneNumber}})\r\n            .then((res) => console.log(res))\r\n            .catch((err) => console.log(err))\r\n    }\r\n\r\n    const handleUpdate = async (event) => {\r\n        await axios({method: \"PUT\", url: \"/suppliers/\" + id, data: {name, address, mail, phoneNumber}})\r\n            .then((res) => console.log(res))\r\n            .catch((err) => console.log(err))\r\n    }\r\n\r\n    return (\r\n        <Grid container justify=\"center\" style={{background: \"#FFF\"}}>\r\n            <Grid item xs={6} align=\"center\">\r\n                <Typography variant=\"h5\">Create a Supplier</Typography>\r\n                {<form noValidate autoComplete=\"off\">\r\n                    <TextField label=\"Name\" value={name} onChange={(event) => setName(event.target.value)}/> <br/>\r\n                    <TextField label=\"Address\" value={address} onChange={(event) => setAddress(event.target.value)}/>\r\n                    <br/>\r\n                    <TextField label=\"Mail\" value={mail} onChange={(event) => setMail(event.target.value)}/> <br/>\r\n                    <TextField label=\"Phone Number\" value={phoneNumber}\r\n                               onChange={(event) => setPhoneNumber(event.target.value)}/> <br/>\r\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}}\r\n                            onClick={handleCreate}>Create</Button>\r\n                </form>}\r\n            </Grid>\r\n            <Grid item xs={6} align=\"center\">\r\n                <Typography variant=\"h5\">Update a Supplier</Typography>\r\n                {<form noValidate autoComplete=\"off\">\r\n                    <TextField label=\"ID\" value={id} onChange={(event) => setId(event.target.value)}/> <br/>\r\n                    <TextField label=\"Name\" value={name} onChange={(event) => setName(event.target.value)}/> <br/>\r\n                    <TextField label=\"Address\" value={address} onChange={(event) => setAddress(event.target.value)}/>\r\n                    <br/>\r\n                    <TextField label=\"Mail\" value={mail} onChange={(event) => setMail(event.target.value)}/> <br/>\r\n                    <TextField label=\"Phone Number\" value={phoneNumber}\r\n                               onChange={(event) => setPhoneNumber(event.target.value)}/> <br/>\r\n                    <Button color={'secondary'} variant=\"contained\" style={{margin: \"25px\", width: \"250px\"}}\r\n                            onClick={handleUpdate}>Update</Button>\r\n                </form>}\r\n            </Grid>\r\n            <Grid item xs={12} align=\"center\">\r\n                <Typography variant=\"h5\">All Suppliers</Typography>\r\n                <TableContainer component={Paper} style={{margin: \"25px 0px\"}}>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"left\">ID</TableCell>\r\n                            <TableCell align=\"left\">Name</TableCell>\r\n                            <TableCell align=\"left\">Address</TableCell>\r\n                            <TableCell align=\"left\">Mail</TableCell>\r\n                            <TableCell align=\"right\">Phone Number</TableCell>\r\n                            <TableCell align=\"right\">Material Dates</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {rows != null ? rows.map(row => {\r\n                            return (\r\n                                <TableRow key={row.id}>\r\n                                    <TableCell>{row.id}</TableCell>\r\n                                    <TableCell>{row.name}</TableCell>\r\n                                    <TableCell>{row.address}</TableCell>\r\n                                    <TableCell>{row.mail}</TableCell>\r\n                                    <TableCell>{row.phoneNumber}</TableCell>\r\n                                    <TableCell>{row.materialDates}</TableCell>\r\n                                </TableRow>\r\n                            )\r\n                        }) : null}\r\n                    </TableBody>\r\n                </TableContainer>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Office;","D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\components\\customer\\customerBar.js",[],"D:\\Casper\\Documents\\React\\EAPSCO-Web-Application\\client\\src\\components\\product\\productBar.js",[],{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","severity":1,"message":"151","line":14,"column":22,"nodeType":"152","messageId":"153","endLine":14,"endColumn":35},{"ruleId":"154","severity":1,"message":"155","line":32,"column":11,"nodeType":"156","messageId":"157","endLine":42,"endColumn":12},{"ruleId":"158","severity":1,"message":"159","line":64,"column":6,"nodeType":"160","endLine":64,"endColumn":8,"suggestions":"161"},{"ruleId":"150","severity":1,"message":"162","line":50,"column":11,"nodeType":"152","messageId":"153","endLine":50,"endColumn":18},{"ruleId":"158","severity":1,"message":"163","line":27,"column":15,"nodeType":"164","endLine":29,"endColumn":6},{"ruleId":"158","severity":1,"message":"165","line":28,"column":16,"nodeType":"166","endLine":28,"endColumn":33},{"ruleId":"167","severity":1,"message":"168","line":72,"column":51,"nodeType":"164","messageId":"169","endLine":72,"endColumn":53},{"ruleId":"158","severity":1,"message":"163","line":27,"column":15,"nodeType":"164","endLine":29,"endColumn":6},{"ruleId":"158","severity":1,"message":"165","line":28,"column":16,"nodeType":"166","endLine":28,"endColumn":33},{"ruleId":"167","severity":1,"message":"168","line":71,"column":51,"nodeType":"164","messageId":"169","endLine":71,"endColumn":53},{"ruleId":"158","severity":1,"message":"165","line":25,"column":16,"nodeType":"170","endLine":25,"endColumn":27},{"ruleId":"167","severity":1,"message":"168","line":88,"column":51,"nodeType":"164","messageId":"169","endLine":88,"endColumn":53},{"ruleId":"150","severity":1,"message":"171","line":4,"column":8,"nodeType":"152","messageId":"153","endLine":4,"endColumn":14},{"ruleId":"150","severity":1,"message":"172","line":5,"column":9,"nodeType":"152","messageId":"153","endLine":5,"endColumn":14},{"ruleId":"150","severity":1,"message":"173","line":5,"column":16,"nodeType":"152","messageId":"153","endLine":5,"endColumn":26},{"ruleId":"158","severity":1,"message":"163","line":27,"column":15,"nodeType":"164","endLine":29,"endColumn":6},{"ruleId":"158","severity":1,"message":"165","line":28,"column":16,"nodeType":"166","endLine":28,"endColumn":33},{"ruleId":"167","severity":1,"message":"168","line":39,"column":55,"nodeType":"164","messageId":"169","endLine":39,"endColumn":57},{"ruleId":"158","severity":1,"message":"163","line":10,"column":15,"nodeType":"164","endLine":12,"endColumn":6},{"ruleId":"158","severity":1,"message":"165","line":11,"column":16,"nodeType":"166","endLine":11,"endColumn":33},{"ruleId":"167","severity":1,"message":"168","line":25,"column":55,"nodeType":"164","messageId":"169","endLine":25,"endColumn":57},{"ruleId":"167","severity":1,"message":"168","line":29,"column":47,"nodeType":"164","messageId":"169","endLine":29,"endColumn":49},{"ruleId":"158","severity":1,"message":"163","line":28,"column":15,"nodeType":"164","endLine":30,"endColumn":6},{"ruleId":"158","severity":1,"message":"165","line":29,"column":16,"nodeType":"166","endLine":29,"endColumn":33},{"ruleId":"167","severity":1,"message":"168","line":55,"column":51,"nodeType":"164","messageId":"169","endLine":55,"endColumn":53},{"ruleId":"158","severity":1,"message":"163","line":27,"column":15,"nodeType":"164","endLine":29,"endColumn":6},{"ruleId":"158","severity":1,"message":"165","line":28,"column":16,"nodeType":"166","endLine":28,"endColumn":33},{"ruleId":"167","severity":1,"message":"168","line":71,"column":51,"nodeType":"164","messageId":"169","endLine":71,"endColumn":53},{"ruleId":"158","severity":1,"message":"163","line":25,"column":15,"nodeType":"164","endLine":27,"endColumn":6},{"ruleId":"158","severity":1,"message":"165","line":26,"column":16,"nodeType":"166","endLine":26,"endColumn":33},{"ruleId":"167","severity":1,"message":"168","line":39,"column":47,"nodeType":"164","messageId":"169","endLine":39,"endColumn":49},{"ruleId":"158","severity":1,"message":"163","line":23,"column":15,"nodeType":"164","endLine":25,"endColumn":6},{"ruleId":"158","severity":1,"message":"165","line":24,"column":16,"nodeType":"166","endLine":24,"endColumn":33},{"ruleId":"167","severity":1,"message":"168","line":51,"column":51,"nodeType":"164","messageId":"169","endLine":51,"endColumn":53},{"ruleId":"158","severity":1,"message":"163","line":24,"column":15,"nodeType":"164","endLine":26,"endColumn":6},{"ruleId":"158","severity":1,"message":"165","line":25,"column":16,"nodeType":"166","endLine":25,"endColumn":33},{"ruleId":"167","severity":1,"message":"168","line":38,"column":45,"nodeType":"164","messageId":"169","endLine":38,"endColumn":47},{"ruleId":"158","severity":1,"message":"163","line":24,"column":15,"nodeType":"164","endLine":26,"endColumn":6},{"ruleId":"158","severity":1,"message":"165","line":25,"column":16,"nodeType":"166","endLine":25,"endColumn":33},{"ruleId":"158","severity":1,"message":"163","line":25,"column":15,"nodeType":"164","endLine":27,"endColumn":6},{"ruleId":"158","severity":1,"message":"165","line":26,"column":16,"nodeType":"166","endLine":26,"endColumn":33},{"ruleId":"167","severity":1,"message":"168","line":53,"column":51,"nodeType":"164","messageId":"169","endLine":53,"endColumn":53},"no-native-reassign",["174"],"no-negated-in-lhs",["175"],"no-unused-vars","'setHasAccount' is assigned a value but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'authListener'. Either include it or remove the dependency array.","ArrayExpression",["176"],"'classes' is assigned a value but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","Assignments to the 'rows' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","AwaitExpression","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","CallExpression","'Action' is defined but never used.","'Route' is defined but never used.","'withRouter' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"177","fix":"178"},"Update the dependencies array to be: [authListener]",{"range":"179","text":"180"},[1500,1502],"[authListener]"]